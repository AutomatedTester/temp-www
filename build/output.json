{"expect.element":[{"name":"a","params":[{"name":"type","types":"string","descr":"<p>The expected type</p>","optional":false},{"name":"message","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Checks if the type (i.e. tag name) of a specified element is of an expected value.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#q').to.be.an('input');\n  browser.expect.element('#q').to.be.an('input', 'Testing if #q is an input');\n  browser.expect.element('#w').to.be.a('span');\n}","returns":null,"since":"v0.7","see":[],"aliases":["an"],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/type.js?message=api-docs%3A%20update%20a#","internal":false,"display":".a(type)","syntax":""},{"name":"active","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Property that checks if an element is active in the DOM.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#main').to.be.active;\n  browser.expect.element('#main').to.not.be.active;\n  browser.expect.element('#main').to.be.active.before(100);\n};","returns":null,"since":"v1.1","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/active.js?message=api-docs%3A%20update%20active#","internal":false,"display":".active","syntax":""},{"name":"attribute","params":[{"name":"attribute","types":"string","descr":"<p>The attribute name</p>","optional":false},{"name":"message","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Checks if a given attribute of an element exists and optionally if it has the expected value.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('body').to.have.attribute('data-attr');\n  browser.expect.element('body').to.not.have.attribute('data-attr');\n  browser.expect.element('body').to.not.have.attribute('data-attr', 'Testing if body does not have data-attr');\n  browser.expect.element('body').to.have.attribute('data-attr').before(100);\n  browser.expect.element('body').to.have.attribute('data-attr')\n    .equals('some attribute');\n  browser.expect.element('body').to.have.attribute('data-attr')\n    .not.equals('other attribute');\n  browser.expect.element('body').to.have.attribute('data-attr')\n    .which.contains('something');\n  browser.expect.element('body').to.have.attribute('data-attr')\n    .which.matches(/^something\\ else/);\n};","returns":null,"since":"v0.7","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/attribute.js?message=api-docs%3A%20update%20attribute#","internal":false,"display":".attribute(name)","syntax":""},{"name":"css","params":[{"name":"property","types":"string","descr":"<p>The css property name</p>","optional":false},{"name":"message","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Checks a given css property of an element exists and optionally if it has the expected value.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#main').to.have.css('display');\n  browser.expect.element('#main').to.have.css('display', 'Testing for display');\n  browser.expect.element('#main').to.not.have.css('display');\n  browser.expect.element('#main').to.have.css('display').before(100);\n  browser.expect.element('#main').to.have.css('display').which.equals('block');\n  browser.expect.element('#main').to.have.css('display').which.contains('some value');\n  browser.expect.element('#main').to.have.css('display').which.matches(/some\\ value/);\n};","returns":null,"since":"v0.7","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/css.js?message=api-docs%3A%20update%20css#","internal":false,"display":".css(property)","syntax":""},{"name":"enabled","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Property that checks if an element is currently enabled.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#weblogin').to.be.enabled;\n  browser.expect.element('#main').to.not.be.enabled;\n  browser.expect.element('#main').to.be.enabled.before(100);\n};","returns":null,"since":"v0.7","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/enabled.js?message=api-docs%3A%20update%20enabled#","internal":false,"display":".enabled","syntax":""},{"name":"present","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Property that checks if an element is present in the DOM.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#main').to.be.present;\n  browser.expect.element('#main').to.not.be.present;\n  browser.expect.element('#main').to.be.present.before(100);\n};","returns":null,"since":"v0.7","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/present.js?message=api-docs%3A%20update%20present#","internal":false,"display":".present","syntax":""},{"name":"property","params":[{"name":"property","types":"string","descr":"<p>The property name</p>","optional":false},{"name":"message","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Checks if a given DOM property of an element has the expected value. For all the available DOM element properties, consult the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">Element doc at MDN</a>.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('body').to.have.property('className').equals('test-class');\n  browser.expect.element('body').to.have.property('className').matches(/^something\\ else/);\n  browser.expect.element('body').to.not.have.property('classList').equals('test-class');\n  browser.expect.element('body').to.have.property('classList').deep.equal(['class-one', 'class-two']);\n  browser.expect.element('body').to.have.property('classList').contain('class-two');\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/property.js?message=api-docs%3A%20update%20property#","internal":false,"display":".property(name)","syntax":""},{"name":"selected","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Property that checks if an OPTION element, or an INPUT element of type checkbox or radio button is currently selected.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#main').to.be.selected;\n  browser.expect.element('#main').to.not.be.selected;\n  browser.expect.element('#main').to.be.selected.before(100);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/selected.js?message=api-docs%3A%20update%20selected#","internal":false,"display":".selected","syntax":""},{"name":"text","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Property that retrieves the text contained by an element. Can be chained to check if contains/equals/matches the specified text or regex.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#main').text.to.equal('The Night Watch');\n  browser.expect.element('#main').text.to.not.equal('The Night Watch');\n  browser.expect.element('#main').text.to.equal('The Night Watch').before(100);\n  browser.expect.element('#main').text.to.contain('The Night Watch');\n  browser.expect.element('#main').text.to.match(/The\\ Night\\ Watch/);\n};","returns":null,"since":"v0.7","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/text.js?message=api-docs%3A%20update%20text#","internal":false,"display":".text","syntax":""},{"name":"value","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Property that retrieves the value (i.e. the value attributed) of an element. Can be chained to check if contains/equals/matches the specified text or regex.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#q').to.have.value.that.equals('search');\n  browser.expect.element('#q').to.have.value.not.equals('search');\n  browser.expect.element('#q').to.have.value.which.contains('search');\n  browser.expect.element('#q').to.have.value.which.matches(/search/);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/value.js?message=api-docs%3A%20update%20value#","internal":false,"display":".value","syntax":""},{"name":"visible","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.element","descr":"<p>Property that asserts the visibility of a specified element.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.element('#main').to.be.visible;\n  browser.expect.element('#main').to.not.be.visible;\n  browser.expect.element('#main').to.be.visible.before(100);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/element/visible.js?message=api-docs%3A%20update%20visible#","internal":false,"display":".visible","syntax":""}],"expect.elements":[{"name":"count","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect.elements","descr":"<p>Checks if the number of elements specified by a selector is equal or not to a given value.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.elements('div').count.to.equal(10);\n  browser.expect.elements('p').count.to.not.equal(1);\n}","returns":null,"since":"v1.1","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/assertions/elements/count.js?message=api-docs%3A%20update%20count#","internal":false,"display":".elements(<element>).count","syntax":""}],"expect":[{"name":"cookie","params":[{"name":"name","types":"string","descr":"<p>The name of the cookie to be inspected</p>","optional":false},{"name":"domain","types":"string","descr":"<p>The domain name for which the cookie is set.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect","descr":"<p>Checks if the content of the title element is of an expected value.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.cookie('cookie-name').to.contain('cookie-value');\n  browser.expect.cookie('cookie-name').to.match(/regex/);\n  browser.expect.cookie('loginCookie', 'example.org').to.contain('cookie-value');\n}","returns":null,"since":"v1.1","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/cookie.js?message=api-docs%3A%20update%20cookie#","internal":false,"display":".expect.cookie()","syntax":""},{"name":"element","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"descr":"<p>If this is missing, it will be the main expect command name</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/element.js?message=api-docs%3A%20update%20element#","internal":false,"display":null,"syntax":""},{"name":"element","params":[{"name":"args","types":"","descr":"","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"descr":"","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/element.js?message=api-docs%3A%20update%20element#","internal":false,"display":null,"syntax":""},{"name":"elements","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"descr":"<p>If this is missing, it will be the main expect command name</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/elements.js?message=api-docs%3A%20update%20elements#","internal":false,"display":null,"syntax":""},{"name":"title","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect","descr":"<p>Checks if the content of the page title is of an expected value.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.title().to.contain('value');\n  browser.expect.title().to.match(/value/);\n}","returns":null,"since":"v1.1","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/title.js?message=api-docs%3A%20update%20title#","internal":false,"display":".title()","syntax":""},{"name":"url","params":[],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"expect","descr":"<p>Checks if the page url is of an expected value.</p>","example":"this.demoTest = function (browser) {\n  browser.expect.url().to.contain('https://');\n  browser.expect.url().to.endWith('.org');\n}","returns":null,"since":"v1.1","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/expect/url.js?message=api-docs%3A%20update%20url#","internal":false,"display":".url()","syntax":""}],"protocol.elementstate":[{"name":"elementActive","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-active-element","linkDisplay":"/#get-active-element","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Get the element on the page that currently has focus. The element will be returned as a <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element</a> JSON object.</p>","example":"module.exports = {\n 'demo Test' : function(browser) {\n    browser.elementActive(function(result) {\n      console.log(result.value)\n    });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementActive.js?message=api-docs%3A%20update%20elementActive#undefined","internal":true,"display":null,"syntax":""},{"name":"getAttribute","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"attribute","types":"string","descr":"<p>The attribute name to inspect.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value; not required if using <code>await</code> operator.</p>","optional":false}],"link":"#dfn-get-element-attribute","linkDisplay":"/#dfn-get-element-attribute","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Retrieve the value of an attribute for a given DOM element.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getAttribute('#main ul li a.first', 'href', function(result) {\n      console.log('result', result);\n    });\n\n    // with explicit locate strategy\n    browser.getAttribute('css selector', '#main ul li a.first', 'href', function(result) {\n      console.log('result', result);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getAttribute({\n      selector: '#main ul li a.first',\n      index: 1,\n      suppressNotFoundErrors: true\n    }, 'href', function(result) {\n      console.log('result', result);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getAttribute('#main ul li a.first', 'href');\n    console.log('attribute', result);\n  }\n}","returns":{"type":"*","descr":" The value of the attribute"},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getAttribute.js?message=api-docs%3A%20update%20getAttribute#","internal":false,"display":null,"syntax":".getAttribute(selector, attribute, callback)\n.getAttribute(using, selector, attribute, callback)"},{"name":"getCssProperty","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"cssProperty","types":"string","descr":"<p>The CSS property to inspect.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value; not required if using <code>await</code> operator.</p>","optional":false}],"link":"#get-element-css-value","linkDisplay":"/#get-element-css-value","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Retrieve the value of a css property for a given DOM element.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getCssProperty('#main ul li a.first', 'display', function(result) {\n      console.log('result', result);\n    });\n\n    // with explicit locate strategy\n    browser.getCssProperty('css selector', '#main ul li a.first', 'display', function(result) {\n      console.log('result', result);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getCssProperty({\n      selector: '#main ul li a.first',\n      index: 1,\n      suppressNotFoundErrors: true\n    }, 'display', function(result) {\n      console.log('result', result);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getCssProperty('#main ul li a.first', 'display');\n    console.log('display', result);\n  }\n}","returns":{"type":"*","descr":" The value of the css property"},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getCssProperty.js?message=api-docs%3A%20update%20getCssProperty#","internal":false,"display":null,"syntax":".getCssProperty(selector, cssProperty, callback)\n.getCssProperty(using, selector, cssProperty, callback)"},{"name":"getElementProperty","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"property","types":"string","descr":"<p>The property to inspect.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value; not required if using <code>await</code> operator.</p>","optional":false}],"link":"#get-element-property","linkDisplay":"/#get-element-property","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Retrieve the value of a specified DOM property for the given element. For all the available DOM element properties, consult the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">Element doc at MDN</a>.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getElementProperty('#login input[type=text]', 'classList', function(result) {\n      console.log('result', result);\n    });\n\n    // with explicit locate strategy\n    browser.getElementProperty('css selector', '#login input[type=text]', 'classList', function(result) {\n      console.log('result', result);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getElementProperty({\n      selector: '#login input[type=text]',\n      index: 1,\n      suppressNotFoundErrors: true\n    }, 'classList', function(result) {\n      console.log('result', result);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getElementProperty('#login input[type=text]', 'classList');\n    console.log('classList', result);\n  }\n}","returns":{"type":"*","descr":" The value of the property"},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getElementProperty.js?message=api-docs%3A%20update%20getElementProperty#","internal":false,"display":null,"syntax":".getElementProperty(selector, property, callback)\n.getElementProperty(using, selector, property, callback)"},{"name":"getElementSize","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#dfn-get-element-rect","linkDisplay":"/#dfn-get-element-rect","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Determine an element's size in pixels. For W3C Webdriver compatible clients (such as GeckoDriver), this command is equivalent to <code>getLocation</code> and both return<br />\nthe dimensions and coordinates of the given element:</p>\n<ul>\n<li>x: X axis position of the top-left corner of the element, in CSS pixels</li>\n<li>y: Y axis position of the top-left corner of the element, in CSS pixels</li>\n<li>height: Height of the element’s bounding rectangle in CSS pixels;</li>\n<li>width: Width of the web element’s bounding rectangle in CSS pixels.</li>\n</ul>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getElementSize('#login', function(result) {\n      console.log('result', result);\n    });\n\n    // with explicit locate strategy\n    browser.getElementSize('css selector', '#login', function(result) {\n      console.log('result', result);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getElementSize({\n      selector: '#login',\n      index: 1,\n      suppressNotFoundErrors: true\n    }, function(result) {\n      console.log('result', result);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getElementSize('#login');\n    console.log('classList', result);\n  }\n}","returns":{"type":"{width: number, height: number}","descr":" The width and height of the element in pixels"},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getElementSize.js?message=api-docs%3A%20update%20getElementSize#","internal":false,"display":null,"syntax":".getElementSize(selector, callback)\n.getElementSize(using, selector, callback)"},{"name":"getTagName","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#dfn-get-element-tag-name","linkDisplay":"/#dfn-get-element-tag-name","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Query for an element's tag name.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getTagName('#login', function(result) {\n      console.log('result', result);\n    });\n\n    // with explicit locate strategy\n    browser.getTagName('css selector', '#login', function(result) {\n      console.log('result', result);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getTagName({\n      selector: '#login',\n      index: 1,\n      suppressNotFoundErrors: true\n    }, function(result) {\n      console.log('result', result);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getTagName('#login');\n    console.log('tagName', result);\n  }\n}","returns":{"type":"number","descr":" The element's tag name, as a lowercase string."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getTagName.js?message=api-docs%3A%20update%20getTagName#","internal":false,"display":null,"syntax":".getTagName(selector, callback)\n.getTagName(using, selector, callback)"},{"name":"getText","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string","descr":"<p>The CSS/Xpath selector used to locate the element.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#dfn-get-element-text","linkDisplay":"/#dfn-get-element-text","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Returns the visible text for the element.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getText('#main ul li a.first', function(result) {\n      this.assert.equal(typeof result, 'object);\n      this.assert.strictEqual(result.status, 0); // only when using Selenium / JSONWire\n      this.assert.equal(result.value, 'nightwatchjs.org');\n    });\n\n    // with explicit locate strategy\n    browser.getText('css selector', '#main ul li a.first', function(result) {\n      console.log('getText result', result.value);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getText({\n      selector: '#main ul li a',\n      index: 1\n    }, function(result) {\n      console.log('getText result', result.value);\n    });\n\n    browser.getText({\n      selector: '#main ul li a.first',\n      timeout: 2000 // overwrite the default timeout (in ms) to check if the element is present\n    }, function(result) {\n      console.log('getText result', result.value);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getText('#main ul li a.first');\n    console.log('getText result', result);\n  }\n}","returns":{"type":"string","descr":" The element's visible text."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getText.js?message=api-docs%3A%20update%20getText#","internal":false,"display":null,"syntax":".getText(selector, callback)\n.getText(using, selector, callback)"},{"name":"getValue","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#dfn-get-element-tag-name","linkDisplay":"/#dfn-get-element-tag-name","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Returns a form element current value.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getValue('#login input[type=text]', function(result) {\n      console.log('result', result);\n    });\n\n    // with explicit locate strategy\n    browser.getValue('css selector', '#login input[type=text]', function(result) {\n      console.log('result', result);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getValue({\n      selector: '#login input[type=text]',\n      index: 1,\n      suppressNotFoundErrors: true\n    }, function(result) {\n      console.log('result', result);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getValue('#login input[type=text]');\n    console.log('Value', result);\n  }\n}","returns":{"type":"string","descr":" The element's value."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getValue.js?message=api-docs%3A%20update%20getValue#","internal":false,"display":null,"syntax":".getValue(selector, callback)"},{"name":"isEnabled","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#is-element-enabled","linkDisplay":"/#is-element-enabled","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Determines if an element is enabled, as indicated by the 'disabled' attribute.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.isEnabled('#main select option.first', function(result) {\n      this.assert.equal(typeof result, \"object\");\n      this.assert.equal(result.status, 0);\n      this.assert.equal(result.value, true);\n    });\n\n    // with explicit locate strategy\n    browser.isEnabled('css selector', '#main select option.first');\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.isEnabled({\n      selector: '#main ul li a',\n      index: 1,\n      suppressNotFoundErrors: true\n    });\n\n    browser.isEnabled({\n      selector: '#main select option.first',\n      timeout: 2000 // overwrite the default timeout (in ms) to check if the element is present\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.isEnabled('#main select option.first');\n    console.log('isVisible result', result);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/isEnabled.js?message=api-docs%3A%20update%20isEnabled#","internal":false,"display":null,"syntax":".isEnabled(selector, callback)\n.isEnabled(using, selector, callback)"},{"name":"isSelected","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#is-element-selected","linkDisplay":"/#is-element-selected","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Determines if an element is selected.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.isSelected('#main select option.first', function(result) {\n      this.assert.equal(typeof result, \"object\");\n      this.assert.equal(result.status, 0);\n      this.assert.equal(result.value, true);\n    });\n\n    // with explicit locate strategy\n    browser.isSelected('css selector', '#main select option.first');\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.isSelected({\n      selector: '#main ul li a',\n      index: 1,\n      suppressNotFoundErrors: true\n    });\n\n    browser.isSelected({\n      selector: '#main select option.first',\n      timeout: 2000 // overwrite the default timeout (in ms) to check if the element is present\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.isSelected('#main select option.first');\n    console.log('isVisible result', result);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/isSelected.js?message=api-docs%3A%20update%20isSelected#","internal":false,"display":null,"syntax":".isSelected(selector, callback)\n.isSelected(using, selector, callback)"},{"name":"isVisible","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#element-displayedness","linkDisplay":"/#element-displayedness","jsonwire":false,"isW3C":false,"api":"protocol.elementstate","descr":"<p>Determine if an element is currently displayed.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.isVisible('#main ul li a.first', function(result) {\n      this.assert.equal(typeof result, \"object\");\n      this.assert.equal(result.status, 0);\n      this.assert.equal(result.value, true);\n    });\n\n    // with explicit locate strategy\n    browser.isVisible('css selector', '#main ul li a.first');\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.isVisible({\n      selector: '#main ul li a',\n      index: 1,\n      suppressNotFoundErrors: true\n    });\n\n    browser.isVisible({\n      selector: '#main ul li a.first',\n      timeout: 2000 // overwrite the default timeout (in ms) to check if the element is present\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.isVisible('#main ul li a.first');\n    console.log('isVisible result', result);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/isVisible.js?message=api-docs%3A%20update%20isVisible#","internal":false,"display":null,"syntax":".isVisible(selector, callback)\n.isVisible(using, selector, callback)"}],"protocol.elements":[{"name":"element","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use.</p>","optional":false},{"name":"value","types":"string","descr":"<p>The search target.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#find-element","linkDisplay":"/#find-element","jsonwire":false,"isW3C":false,"api":"protocol.elements","descr":"<p>Search for an element on the page, starting from the document root. The located element will be returned as a web element JSON object.<br />\nFirst argument to be passed is the locator strategy, which is detailed on the <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">WebDriver docs</a>.</p>\n<p>The locator strategy can be one of:</p>\n<ul>\n<li><code>css selector</code></li>\n<li><code>link text</code></li>\n<li><code>partial link text</code></li>\n<li><code>tag name</code></li>\n<li><code>xpath</code></li>\n</ul>","example":"module.exports = {\n 'demo Test' : function(browser) {\n    browser.element('css selector', 'body', function(result) {\n      console.log(result.value)\n    });\n  },\n\n  'es6 async demo Test': async function(browser) {\n    const result = await browser.element('css selector', 'body');\n    console.log('result value is:', result.value);\n  }\n}\n\n// Example with using page object elements\nmodule.exports = {\n 'demo Test with page object' : function(browser) {\n    const loginPage = browser.page.login();\n    loginPage.api.element('@resultContainer', function(result) {\n      console.log(result.value)\n    });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/element.js?message=api-docs%3A%20update%20element#undefined","internal":false,"display":null,"syntax":".element(using, value, callback)"},{"name":"elementIdElement","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"using","types":"string","descr":"<p>The locator strategy to use.</p>","optional":false},{"name":"value","types":"string","descr":"<p>The search target.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#find-element-from-element","linkDisplay":"/#find-element-from-element","jsonwire":false,"isW3C":false,"api":"protocol.elements","descr":"<p>Search for an element on the page, starting from the identified element. The located element will be returned as a Web Element JSON object.</p>\n<p>This command operates on a protocol level and requires a <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a>. Read more on <a href=\"https://www.w3.org/TR/webdriver1/#element-retrieval\">Element retrieval</a> on the W3C WebDriver spec page.</p>","example":"module.exports = {\n 'demo Test' : function(browser) {\n    browser.elementIdElement('<WebElementId>', 'css selector', '.new-element', function(result) {\n      console.log(result.value)\n    });\n  },\n\n  'es6 async demo Test': async function(browser) {\n    const result = await browser.elementIdElement('<WebElementId>', 'css selector', '.new-element');\n    console.log(result.value);\n  },\n\n  'page object demo Test': function (browser) {\n     var nightwatch = browser.page.nightwatch();\n     nightwatch.navigate();\n\n     const navbarHeader = nightwatch.section.navbarHeader;\n\n     navbarHeader.api.elementIdElement('@versionDropdown', 'css selector', 'option', function(result) {\n       browser.assert.ok(client.WEBDRIVER_ELEMENT_ID in result.value, 'The Webdriver Element Id is found in the result');\n     });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdElement.js?message=api-docs%3A%20update%20elementIdElement#undefined","internal":true,"display":null,"syntax":".elementIdElement(webElementId, using, value, callback)"},{"name":"elementIdElements","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"using","types":"string","descr":"<p>The locator strategy to use.</p>","optional":false},{"name":"value","types":"string","descr":"<p>The search target.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#find-elements-from-element","linkDisplay":"/#find-elements-from-element","jsonwire":false,"isW3C":false,"api":"protocol.elements","descr":"<p>Search for multiple elements on the page, starting from the identified element. The located element will be returned as a web element JSON objects.</p>","example":"module.exports = {\n 'demo Test' : function(browser) {\n    browser.elementIdElements('<WebElementId>', 'css selector', 'ul li', function(result) {\n      console.log(result.value)\n    });\n  },\n\n  'es6 async demo Test': async function(browser) {\n    const result = await browser.elementIdElements('<WebElementId>', 'css selector', 'ul li');\n    console.log(result.value);\n  },\n\n  'page object demo Test': function (browser) {\n     var nightwatch = browser.page.nightwatch();\n     nightwatch.navigate();\n\n     const navbarHeader = nightwatch.section.navbarHeader;\n\n     navbarHeader.api.elementIdElements('@versionDropdown', 'css selector', 'option', function(result) {\n       browser.assert.equal(result.value.length, 2, 'There are two option elements in the drop down');\n     });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdElements.js?message=api-docs%3A%20update%20elementIdElements#undefined","internal":true,"display":null,"syntax":".elementIdElements(webElementId, using, value, callback)"},{"name":"elementIdEquals","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"otherId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the other element to compare against.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#finding-elements-to-interact","linkDisplay":"/#finding-elements-to-interact","jsonwire":false,"isW3C":false,"api":"protocol.elements","descr":"<p>Test if two web element IDs refer to the same DOM element.</p>\n<p>This command is <strong>deprecated</strong> and is only available on the <a href=\"https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidelementidequalsother\">JSON Wire protocol</a></p>","example":"module.exports = {\n 'demo Test' : function(browser) {\n    browser.elementIdEquals('<ID-1>', '<ID-2>', function(result) {\n      console.log(result.value)\n    });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdEquals.js?message=api-docs%3A%20update%20elementIdEquals#undefined","internal":true,"display":null,"syntax":""},{"name":"elements","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use.</p>","optional":false},{"name":"value","types":"string","descr":"<p>The search target.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function to be invoked with the result when the command finishes.</p>","optional":false}],"link":"#find-elements","linkDisplay":"/#find-elements","jsonwire":false,"isW3C":false,"api":"protocol.elements","descr":"<p>Search for multiple elements on the page, starting from the document root. The located elements will be returned as web element JSON objects.<br />\nFirst argument to be passed is the locator strategy, which is detailed on the <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">WebDriver docs</a>.</p>\n<p>The locator strategy can be one of:</p>\n<ul>\n<li><code>css selector</code></li>\n<li><code>link text</code></li>\n<li><code>partial link text</code></li>\n<li><code>tag name</code></li>\n<li><code>xpath</code></li>\n</ul>","example":"module.exports = {\n 'demo Test' : function(browser) {\n    browser.elements('css selector', 'ul li', function(result) {\n      console.log(result.value)\n    });\n  },\n\n  'es6 async demo Test': async function(browser) {\n    const result = await browser.elements('css selector', 'ul li');\n    console.log('result value is:', result.value);\n  },\n\n  'page object demo Test': function (browser) {\n     var nightwatch = browser.page.nightwatch();\n     nightwatch\n       .navigate()\n       .assert.titleContains('Nightwatch.js');\n\n     nightwatch.api.elements('@featuresList', function(result) {\n       console.log(result);\n     });\n\n     browser.end();\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elements.js?message=api-docs%3A%20update%20elements#undefined","internal":false,"display":null,"syntax":".elements(using, value, callback)"},{"name":"findElement","params":[{"name":"selector","types":"string","descr":"<p>The search target.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function to be invoked with the result when the command finishes.</p>","optional":true}],"link":"#find-element","linkDisplay":"/#find-element","jsonwire":false,"isW3C":false,"api":"protocol.elements","descr":"<p>Search for an elements on the page, starting from the document root. The located element will be returned as web element JSON object (with an added .getId() convenience method).<br />\nFirst argument is the element selector, either specified as a string or as an object (with 'selector' and 'locateStrategy' properties).</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    const resultElement = await browser.findElement('.features-container li:first-child');\n\n    console.log('Element Id:', resultElement.getId());\n  },","returns":null,"since":"1.7.0","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/findElement.js?message=api-docs%3A%20update%20findElement#","internal":false,"display":null,"syntax":"browser.findElement(selector, callback)\nawait browser.findElement(selector);"},{"name":"findElements","params":[{"name":"selector","types":"string","descr":"<p>The search target.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function to be invoked with the result when the command finishes.</p>","optional":true}],"link":"#find-elements","linkDisplay":"/#find-elements","jsonwire":false,"isW3C":false,"api":"protocol.elements","descr":"<p>Search for multiple elements on the page, starting from the document root. The located elements will be returned as web element JSON objects (with an added .getId() convenience method).</p>\n<p>First argument is the element selector, either specified as a string or as an object (with 'selector' and 'locateStrategy' properties).</p>","example":"describe('findElements', function() {\n it('finds elements on a page', async function(browser) {\n   const resultElements = await browser.findElements('.features-container li');\n   resultElements.forEach(item => console.log('Element Id:', item.getId()));\n }};\n});","returns":null,"since":"1.7.0","see":["[Working with DOM Elements](/guide/using-nightwatch/finding-and-interacting-with-elements.html)"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/findElements.js?message=api-docs%3A%20update%20findElements#","internal":false,"display":null,"syntax":"browser.findElements(selector, callback)\nawait browser.findElements(selector);"}],"protocol.elementinteraction":[{"name":"clearValue","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-element-clear","linkDisplay":"/#dfn-element-clear","jsonwire":false,"isW3C":false,"api":"protocol.elementinteraction","descr":"<p>Clear a textarea or a text input element's value. Starting with v1.1 <code>clearValue()</code> will wait for the element to be present (until the specified timeout).</p>\n<p>If the element is not found, an error is thrown which will cause the test to fail. Starting with <code>v1.2</code> you can suppress element not found errors by specifying the <code>suppressNotFoundErrors</code> flag.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.clearValue('#login input[type=text]');\n\n    browser.clearValue('#login input[type=text]', function(result) {\n      console.log('clearValue result', result);\n    });\n\n    // with explicit locate strategy\n    browser.clearValue('css selector', '#login input[type=text]');\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.clearValue({\n      selector: '#login input[type=text]',\n      index: 1,\n      suppressNotFoundErrors: true\n    });\n\n    browser.clearValue({\n      selector: '#login input[type=text]',\n      timeout: 2000 // overwrite the default timeout (in ms) to check if the element is present\n    });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/clearValue.js?message=api-docs%3A%20update%20clearValue#","internal":false,"display":null,"syntax":".clearValue(selector, [callback])\n.clearValue(using, selector, [callback])","more":"<h3 id=\"examples\">Examples</h3>\n<p>The example below navigates to google.com, searches for the term &quot;nightwatch.js&quot;, then clears the input using <em>clearValue</em> command and finally verifies if the results container is empty:</p>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\" class=\" language-javascript\"><code class=\" language-javascript\">\nmodule.exports = {\n  before : function(browser) {\n    // see <a href=\"https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12\">https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12</a>\n    browser.globals.waitForConditionTimeout = 5000;\n  },\n\n  &#39;clearValue example test&#39; : function (browser) {\n\n    browser\n      .url(&#39;<a href=\"https://google.com\">https://google.com</a>&#39;)\n      .waitForElementVisible(&#39;input[type=text]&#39;)\n      .setValue(&#39;input[type=text]&#39;, &#39;nightwatch.js&#39;)\n      .click(&#39;button[type=submit]&#39;)\n      .expect.element(&#39;#rcnt&#39;).text.to.contain(&#39;nightwatchjs.org/&#39;);\n\n    browser\n      .clearValue(&#39;input[type=text]&#39;)\n      .expect.element(&#39;#rcnt&#39;).text.to.equal(&#39;&#39;);\n  },\n\n  after : function(browser) {\n    browser.end();\n  }\n};\n</code></pre>\n</div>\n\n<h3 id=\"output\">Output</h3>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\">\n[Clear Value] Test Suite\n============================\n\nRunning:  clearValue example test\n ✔ Element <input[type=text]> was visible after 68 milliseconds.\n ✔ Expected element &lt;#rcnt&gt; text to contain: &quot;nightwatchjs.org/&quot; - condition was met in 763ms\n ✔ Expected element &lt;#rcnt&gt; text to equal: &quot;&quot; - condition was met in 36ms\n\nOK. 3 assertions passed. (7.593s)\n</pre>\n</div>\n\n<h3 id=\"possible-errors\">Possible Errors</h3>\n<p>Here are the type of errors that you might get when using <code>clearValue</code>. Full error details are available when running nightwatch with <code>--verbose</code> flag.</p>\n<ul>\n<li><code>invalid element state</code> - if the referenced element is disabled or is not displayed.</li>\n<li><code>element not visible</code> - if the referenced element is not visible on the page (either is hidden by CSS, has 0-width, or has 0-height)</li>\n</ul>\n"},{"name":"click","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string","descr":"<p>The CSS/Xpath selector used to locate the element.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-element-click","linkDisplay":"/#dfn-element-click","jsonwire":false,"isW3C":false,"api":"protocol.elementinteraction","descr":"<p>Simulates a click event on the given DOM element. The element is scrolled into view if it is not already pointer-interactable. See the WebDriver specification for <a href=\"https://www.w3.org/TR/webdriver/#element-interactability\" target=\"_blank\">element interactability</a>.</p>","example":"module.exports = {\n  demoTest(browser) {\n    browser.click('#main ul li a.first');\n\n    browser.click('#main ul li a.first', function(result) {\n      console.log('Click result', result);\n    });\n\n    // with explicit locate strategy\n    browser.click('css selector', '#main ul li a.first');\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.click({\n      selector: '#main ul li a',\n      index: 1,\n      suppressNotFoundErrors: true\n    });\n\n    browser.click({\n      selector: '#main ul li a.first',\n      timeout: 2000 // overwrite the default timeout (in ms) to check if the element is present\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.click('#main ul li a.first');\n    console.log('Click result', result);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/click.js?message=api-docs%3A%20update%20click#","internal":false,"display":null,"syntax":".click(selector, [callback])\n.click(using, selector, [callback])","more":"<h3 id=\"examples\">Examples</h3>\n<h4 id=\"1-clicking-a-button\">1) Clicking a button</h4>\n<p>The example below navigates to google.com, searches for the term &quot;nightwatch.js&quot; and clicks the submit button.</p>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\" class=\" language-javascript\"><code class=\" language-javascript\">\nmodule.exports = {\n  before : function(browser) {\n    // see <a href=\"https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12\">https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12</a>\n    browser.globals.waitForConditionTimeout = 5000;\n  },\n\n  &#39;click example test&#39; : function (browser) {\n\n    browser\n      .url(&#39;<a href=\"https://google.com\">https://google.com</a>&#39;)\n      .waitForElementVisible(&#39;input[type=text]&#39;)\n      .setValue(&#39;input[type=text]&#39;, &#39;nightwatch.js&#39;)\n      .click(&#39;button[type=submit]&#39;, function(result) {\n        this.assert.strictEqual(result.status, 0);\n      })\n      .expect.element(&#39;#rcnt&#39;).text.to.contain(&#39;nightwatchjs.org/&#39;);\n  },\n\n  after : function(browser) {\n    browser.end();\n  }\n};\n</code></pre>\n</div>\n\n<h4 id=\"output\">Output</h4>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\">\n[Click] Test Suite\n======================\n\nRunning:  clearValue example test\n ✔ Element <input[type=text]> was visible after 67 milliseconds.\n ✔ Passed [strictEqual]: 0 === 0\n ✔ Expected element &lt;#rcnt&gt; text to contain: &quot;nightwatchjs.org/&quot; - condition was met in 768ms\n\nOK. 3 assertions passed. (5.277s)\n</pre>\n</div>\n\n<h4 id=\"2-selecting-an-option-from-a-list\">2) Selecting an option from a list</h4>\n<p>The <code>click</code> command is also used to select an option from a drop down list. The example below navigates to <a href=\"https://www.w3.org\">https://www.w3.org</a> and selects the &quot;All&quot; option from the regions drop down.</p>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\" class=\" language-javascript\"><code class=\" language-javascript\">\nmodule.exports = {\n  before : function(browser) {\n    // see <a href=\"https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12\">https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12</a>\n    browser.globals.waitForConditionTimeout = 5000;\n  },\n\n  &#39;click option from drop down list&#39; : function (browser) {\n\n    browser\n      .url(&#39;<a href=\"https://www.w3.org/\">https://www.w3.org/</a>&#39;)\n      .waitForElementVisible(&#39;#region_form&#39;)\n      .click(&#39;#region_form select&#39;)\n      .click(&#39;#region_form select option[value=&quot;all&quot;]&#39;)\n      .click(&#39;input[type=submit]&#39;, function(result) {\n        this.assert.strictEqual(result.status, 0);\n      });\n  },\n\n  after : function(browser) {\n    browser.end();\n  }\n};\n</code></pre>\n</div>\n\n<h4 id=\"output\">Output</h4>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\">\n[Click Options] Test Suite\n==============================\n\nRunning:  click option from drop down list\n ✔ Element &lt;#region_form&gt; was visible after 64 milliseconds.\n ✔ Passed [strictEqual]: 0 === 0\n\nOK. 2 assertions passed. (6.203s)\n</pre>\n</div>\n\n<h3 id=\"possible-errors\">Possible Errors</h3>\n<ul>\n<li><code>element not visible</code> - if the referenced element is not visible on the page (either hidden by CSS, has 0-width, or has 0-height or it is not within the viewport).</li>\n</ul>\n<p>Full error details are available when running nightwatch with <code>--verbose</code> flag.</p>\n"},{"name":"moveToElement","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"xoffset","types":"number","descr":"<p>X offset to move to, relative to the top-left corner of the element.</p>","optional":false},{"name":"yoffset","types":"number","descr":"<p>Y offset to move to, relative to the top-left corner of the element.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":"","isW3C":false,"api":"protocol.elementinteraction","descr":"<p>Move the mouse by an offset of the specified element. If an element is provided but no offset, the mouse will be moved to the center of the element. If the element is not visible, it will be scrolled into view.</p>","example":"this.demoTest = function (browser) {\n  browser.moveToElement('#main', 10, 10);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/moveToElement.js?message=api-docs%3A%20update%20moveToElement#","internal":false,"display":null,"syntax":".moveToElement(selector, xoffset, yoffset, [callback])\n.moveToElement(using, selector, xoffset, yoffset, [callback])"},{"name":"sendKeys","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"inputValue","types":"string|array","descr":"<p>The text to send to the element or key strokes.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#element-send-keys","linkDisplay":"/#element-send-keys","jsonwire":false,"isW3C":false,"api":"protocol.elementinteraction","descr":"<p>Sends some text to an element. Can be used to set the value of a form element or to send a sequence of key strokes to an element. Any UTF-8 character may be specified.</p>\n<div class=\"alert alert-warning\"><strong>sendKeys</strong> does not clear the existing value of the element. If you wish to do that use the <strong>clearValue()</strong> command beforehand.</div>\n<p>An object map with available keys and their respective UTF-8 characters, as defined on <a href=\"https://www.w3.org/TR/webdriver/#character-types\">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>browser.Keys</code>.</p>","example":"// send some simple text to an input\nthis.demoTest = function (browser) {\n  browser.sendKeys('input[type=text]', 'nightwatch');\n};\n//\n// send some text to an input and hit enter.\nthis.demoTest = function (browser) {\n  browser.sendKeys('input[type=text]', ['nightwatch', browser.Keys.ENTER]);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/sendKeys.js?message=api-docs%3A%20update%20sendKeys#","internal":false,"display":null,"syntax":".sendKeys(selector, inputValue, [callback])"},{"name":"setPassword","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"inputValue","types":"string|array","descr":"<p>The text to send to the element or key strokes.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#element-send-keys","linkDisplay":"/#element-send-keys","jsonwire":false,"isW3C":false,"api":"protocol.elementinteraction","descr":"<p>An alias of &quot;setValue&quot; command, but hides the content from the nightwatch logs.</p>\n<div class=\"alert alert-warning\"><strong>setValue/setPassword</strong> do not clear the existing value of the element. To do so, use the <strong>clearValue()</strong> command.</div>\n<p>An object map with available keys and their respective UTF-8 characters, as defined on <a href=\"https://www.w3.org/TR/webdriver/#character-types\">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>browser.Keys</code>.</p>","example":"// send some simple text to an input\nthis.demoTest = function (browser) {\n  browser.setPassword('input[type=text]', 'nightwatch');\n};\n//\n// send some text to an input and hit enter.\nthis.demoTest = function (browser) {\n  browser.setPassword('input[type=text]', ['nightwatch', browser.Keys.ENTER]);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/setPassword.js?message=api-docs%3A%20update%20setPassword#","internal":false,"display":null,"syntax":".setPassword(selector, inputValue, [callback])"},{"name":"setValue","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"inputValue","types":"string|array","descr":"<p>The text to send to the element or key strokes.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#element-send-keys","linkDisplay":"/#element-send-keys","jsonwire":false,"isW3C":false,"api":"protocol.elementinteraction","descr":"<p>Sends some text to an element. Can be used to set the value of a form element or to send a sequence of key strokes to an element. Any UTF-8 character may be specified.</p>\n<div class=\"alert alert-warning\">Currently, for backwards compatibility reasons <strong>setValue</strong> does not clear the existing value of the element. If you wish to do so, use <strong>updateValue</strong> instead.\nIf you wish to keep the existing value, use the <strong>sendKeys()</strong> command.</div>\n<p>An object map with available keys and their respective UTF-8 characters, as defined on <a href=\"https://www.w3.org/TR/webdriver/#character-types\">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>browser.Keys</code>.</p>","example":"// send some simple text to an input\nthis.demoTest = function (browser) {\n  browser.setValue('input[type=text]', 'nightwatch');\n};\n\n// send some text to an input and hit enter.\nthis.demoTest = function (browser) {\n  browser.setValue('input[type=text]', ['nightwatch', browser.Keys.ENTER]);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/setValue.js?message=api-docs%3A%20update%20setValue#","internal":false,"display":null,"syntax":".setValue(selector, inputValue, [callback])"},{"name":"submitForm","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":"","isW3C":false,"api":"protocol.elementinteraction","descr":"<p>Submit a FORM element. The submit command may also be applied to any element that is a descendant of a FORM element.</p>","example":"this.demoTest = function (browser) {\n  browser.submitForm('form.login');\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/submitForm.js?message=api-docs%3A%20update%20submitForm#","internal":false,"display":null,"syntax":".submitForm(selector, [callback])\n.submitForm(using, selector, [callback])"},{"name":"updateValue","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"inputValue","types":"string|array","descr":"<p>The text to send to the element or key strokes.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#element-send-keys","linkDisplay":"/#element-send-keys","jsonwire":false,"isW3C":false,"api":"protocol.elementinteraction","descr":"<p>Sends some text to an element. Can be used to set the value of a form element or to send a sequence of key strokes to an element. Any UTF-8 character may be specified.</p>\n<div class=\"alert alert-warning\"><strong>updateValue</strong> is equivalent with <strong>setValue</strong> and <strong>sendKeys</strong> with the exception that it clears the value beforehand.</div>\n<p>An object map with available keys and their respective UTF-8 characters, as defined on <a href=\"https://www.w3.org/TR/webdriver/#character-types\">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>browser.Keys</code>.</p>","example":"// send some simple text to an input\nthis.demoTest = function (browser) {\n  browser.updateValue('input[type=text]', 'nightwatch');\n};\n\n// send some text to an input and hit enter.\nthis.demoTest = function (browser) {\n  browser.updateValue('input[type=text]', ['nightwatch', browser.Keys.ENTER]);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/updateValue.js?message=api-docs%3A%20update%20updateValue#","internal":false,"display":null,"syntax":".updateValue(selector, inputValue, [callback])"}],"protocol.elementlocation":[{"name":"getLocation","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#dfn-get-element-rect","linkDisplay":"/#dfn-get-element-rect","jsonwire":false,"isW3C":false,"api":"protocol.elementlocation","descr":"<p>Determine an element's location on the page. The point (0, 0) refers to the upper-left corner of the page. The element's coordinates are returned as a JSON object with x and y properties.</p>\n<p>For W3C Webdriver compatible clients (such as GeckoDriver), this command is equivalent to <code>getElementSize</code> and both return<br />\nthe dimensions and coordinates of the given element:</p>\n<ul>\n<li>x: X axis position of the top-left corner of the element, in CSS pixels</li>\n<li>y: Y axis position of the top-left corner of the element, in CSS pixels</li>\n<li>height: Height of the element’s bounding rectangle in CSS pixels;</li>\n<li>width: Width of the web element’s bounding rectangle in CSS pixels.</li>\n</ul>","example":"module.exports = {\n  demoTest(browser) {\n    browser.getLocation('#login', function(result) {\n      console.log('result', result);\n    });\n\n    // with explicit locate strategy\n    browser.getLocation('css selector', '#login', function(result) {\n      console.log('result', result);\n    });\n\n    // with selector object - see https://nightwatchjs.org/guide#element-properties\n    browser.getLocation({\n      selector: '#login',\n      index: 1,\n      suppressNotFoundErrors: true\n    }, function(result) {\n      console.log('result', result);\n    });\n  },\n\n  demoTestAsync: async function(browser) {\n    const result = await browser.getLocation('#login');\n    console.log('location', result);\n  }\n}","returns":{"type":"{x:number, y:number}","descr":" The X and Y coordinates for the element on the page."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getLocation.js?message=api-docs%3A%20update%20getLocation#","internal":false,"display":null,"syntax":".getLocation(selector, callback)\n.getLocation(using, selector, callback)"},{"name":"getLocationInView","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":"","isW3C":false,"api":"protocol.elementlocation","descr":"<p>Determine an element's location on the screen once it has been scrolled into view.</p>","example":"this.demoTest = function (browser) {\n  browser.getLocationInView(\"#main ul li a.first\", function(result) {\n    this.assert.equal(typeof result, \"object\");\n    this.assert.equal(result.status, 0);\n    this.assert.equal(result.value.x, 200);\n    this.assert.equal(result.value.y, 200);\n  });\n};","returns":{"type":"{x: number, y: number}","descr":" The X and Y coordinates for the element on the page."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/getLocationInView.js?message=api-docs%3A%20update%20getLocationInView#","internal":false,"display":null,"syntax":".getLocationInView(selector, callback)\n.getLocationInView(using, selector, callback)"}],"protocol.waitforelements":[{"name":"waitForElementPresent","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"time=waitForConditionTimeout","types":"number","descr":"<p>The total number of milliseconds to wait before failing.</p>","optional":true},{"name":"poll=waitForConditionPollInterval","types":"number","descr":"<p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p>","optional":true},{"name":"abortOnFailure=abortOnAssertionFailure","types":"boolean","descr":"<p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true},{"name":"message","types":"string","descr":"<p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.waitforelements","descr":"<p>Waits a given time in milliseconds (default 5000ms) for an element to be present in the page before performing any other commands or assertions.<br />\nIf the element fails to be present in the specified amount of time, the test fails. You can change this by setting <code>abortOnFailure</code> to <code>false</code>.</p>\n<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.<br />\nSimilarly, the default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    // with default implicit timeout of 5000ms (can be overwritten in settings under 'globals.waitForConditionTimeout')\n    browser.waitForElementPresent('#index-container');\n\n    // specify the locate strategy (css selector/xpath) as the first argument\n    browser.waitForElementPresent('css selector', '#index-container');\n\n    // with explicit timeout (in milliseconds)\n    browser.waitForElementPresent('#index-container', 1000);\n\n    // continue if failed\n    browser.waitForElementPresent('#index-container', 1000, false);\n\n    // with callback\n    browser.waitForElementPresent('#index-container', 1000, function() {\n      // do something while we're here\n    });\n\n    // with custom output message - the locate strategy is required\n    browser.waitForElementPresent('css selector', '#index-container', 'The index container is found.');\n\n    // with custom Spanish message\n    browser.waitForElementPresent('#index-container', 1000, 'elemento %s no era presente en %d ms');\n\n    // many combinations possible - the message is always the last argument\n    browser.waitForElementPresent('#index-container', 1000, false, function() {}, 'elemento %s no era presente en %d ms');\n  },\n\n  'demo Test with selector objects': function(browser) {\n     browser.waitForElementPresent({\n       selector: '#index-container',\n       timeout: 1000\n     });\n\n     browser.waitForElementPresent({\n       selector: '#index-container',\n       locateStrategy: 'css selector'\n     }, 'Custom output message');\n\n     browser.waitForElementPresent({\n       selector: '.container',\n       index: 2,\n       retryInterval: 100,\n       abortOnFailure: true\n     });\n  }\n\n  'page object demo Test': function (browser) {\n     var nightwatch = browser.page.nightwatch();\n     nightwatch\n       .navigate()\n       .assert.titleContains('Nightwatch.js');\n\n     nightwatch.api.waitForElementPresent('@featuresList', function(result) {\n       console.log(result);\n     });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/waitForElementPresent.js?message=api-docs%3A%20update%20waitForElementPresent#","internal":false,"sortIndex":0,"display":null,"syntax":".waitForElementPresent([using], selector, [timeout], [pollInterval], [abortOnAssertionFailure], [callback], [message]);"},{"name":"waitForElementNotPresent","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"time=waitForConditionTimeout","types":"number","descr":"<p>The total number of milliseconds to wait before failing.</p>","optional":true},{"name":"poll=waitForConditionPollInterval","types":"number","descr":"<p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p>","optional":true},{"name":"abortOnFailure=abortOnAssertionFailure","types":"boolean","descr":"<p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true},{"name":"message","types":"string","descr":"<p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.waitforelements","descr":"<p>Opposite of <code>waitForElementPresent</code>. Waits a given time in milliseconds (default 5000ms) for an element to be not present (i.e. removed) in the page before performing any other commands or assertions.<br />\nIf the element is still present after the specified amount of time, the test fails.</p>\n<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.<br />\nSimilarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    // with default implicit timeout of 5000ms (can be overwritten in settings under 'globals.waitForConditionTimeout')\n    browser.waitForElementNotPresent('#dialog');\n\n    // specify the locate strategy (css selector/xpath) as the first argument\n    browser.waitForElementNotPresent('css selector', '#dialog');\n\n    // with explicit timeout (in milliseconds)\n    browser.waitForElementNotPresent('#dialog', 1000);\n\n    // continue if failed\n    browser.waitForElementNotPresent('#dialog', 1000, false);\n\n    // with callback\n    browser.waitForElementNotPresent('#dialog', 1000, function() {\n      // do something while we're here\n    });\n\n    // with custom output message - the locate strategy is required\n    browser.waitForElementNotPresent('css selector', '#dialog', 'The dialog container is removed.');\n\n    // with custom Spanish message\n    browser.waitForElementNotPresent('#dialog', 1000, 'elemento %s no era presente en %d ms');\n\n    // many combinations possible - the message is always the last argument\n    browser.waitForElementNotPresent('#dialog', 1000, false, function() {}, 'elemento %s no era presente en %d ms');\n  },\n\n  'demo Test with selector objects': function(browser) {\n     browser.waitForElementNotPresent({\n       selector: '#dialog',\n       timeout: 1000\n     });\n\n     browser.waitForElementNotPresent({\n       selector: '#dialog',\n       locateStrategy: 'css selector'\n     }, 'Custom output message');\n\n     browser.waitForElementNotPresent({\n       selector: '.container',\n       index: 2,\n       retryInterval: 100,\n       abortOnFailure: true\n     });\n  }\n\n  'page object demo Test': function (browser) {\n     var nightwatch = browser.page.nightwatch();\n     nightwatch\n       .navigate()\n       .assert.titleContains('Nightwatch.js');\n\n     nightwatch.api.waitForElementNotPresent('@dialogContainer', function(result) {\n       console.log(result);\n     });\n  }\n}","returns":null,"since":null,"see":["waitForElementPresent"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/waitForElementNotPresent.js?message=api-docs%3A%20update%20waitForElementNotPresent#","internal":false,"sortIndex":10,"display":null,"syntax":".waitForElementNotPresent([using], selector, [timeout], [pollInterval], [abortOnAssertionFailure], [callback], [message]);"},{"name":"waitForElementVisible","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"time=waitForConditionTimeout","types":"number","descr":"<p>The total number of milliseconds to wait before failing.</p>","optional":true},{"name":"poll=waitForConditionPollInterval","types":"number","descr":"<p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p>","optional":true},{"name":"abortOnFailure=abortOnAssertionFailure","types":"boolean","descr":"<p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true},{"name":"message","types":"string","descr":"<p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.waitforelements","descr":"<p>Waits a given time in milliseconds (default 5000ms) for an element to be visible in the page before performing any other commands or assertions.</p>\n<p>If the element fails to be present and visible in the specified amount of time, the test fails. You can change this by setting <code>abortOnFailure</code> to <code>false</code>.</p>\n<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>\n<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    // with default implicit timeout of 5000ms (can be overwritten in settings under 'globals.waitForConditionTimeout')\n    browser.waitForElementVisible('#index-container');\n\n    // specify the locate strategy (css selector/xpath) as the first argument\n    browser.waitForElementVisible('css selector', '#index-container');\n\n    // with explicit timeout (in milliseconds)\n    browser.waitForElementVisible('#index-container', 1000);\n\n    // continue if failed\n    browser.waitForElementVisible('#index-container', 1000, false);\n\n    // with callback\n    browser.waitForElementVisible('#index-container', 1000, function() {\n      // do something while we're here\n    });\n\n    // with custom output message - the locate strategy is required\n    browser.waitForElementVisible('css selector', '#index-container', 'The index container is found.');\n\n    // with custom Spanish message\n    browser.waitForElementVisible('#index-container', 1000, 'elemento %s no era presente en %d ms');\n\n    // many combinations possible - the message is always the last argument\n    browser.waitForElementVisible('#index-container', 1000, false, function() {}, 'elemento %s no era visible en %d ms');\n  },\n\n  'demo Test with selector objects': function(browser) {\n     browser.waitForElementVisible({\n       selector: '#index-container',\n       timeout: 1000\n     });\n\n     browser.waitForElementVisible({\n       selector: '#index-container',\n       locateStrategy: 'css selector'\n     }, 'Custom output message');\n\n     browser.waitForElementVisible({\n       selector: '.container',\n       index: 2,\n       retryInterval: 100,\n       abortOnFailure: true\n     });\n  }\n\n  'page object demo Test': function (browser) {\n     var nightwatch = browser.page.nightwatch();\n     nightwatch\n       .navigate()\n       .assert.titleContains('Nightwatch.js');\n\n     nightwatch.api.waitForElementVisible('@featuresList', function(result) {\n       console.log(result);\n     });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/waitForElementVisible.js?message=api-docs%3A%20update%20waitForElementVisible#","internal":false,"sortIndex":20,"display":null,"syntax":".waitForElementVisible([using], selector, [timeout], [pollInterval], [abortOnAssertionFailure], [callback], [message]);"},{"name":"waitForElementNotVisible","params":[{"name":"using","types":"string","descr":"<p>The locator strategy to use. See <a href=\"https://www.w3.org/TR/webdriver/#locator-strategies\">W3C Webdriver - locator strategies</a></p>","optional":true},{"name":"selector","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"time=waitForConditionTimeout","types":"number","descr":"<p>The total number of milliseconds to wait before failing.</p>","optional":true},{"name":"poll=waitForConditionPollInterval","types":"number","descr":"<p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p>","optional":true},{"name":"abortOnFailure=abortOnAssertionFailure","types":"boolean","descr":"<p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true},{"name":"message","types":"string","descr":"<p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.waitforelements","descr":"<p>Opposite of <code>waitForElementVisible</code>. Waits a given time in milliseconds (default 5000ms) for an element to be not visible (i.e. hidden but existing) in the page before performing any other commands or assertions.<br />\nIf the element fails to be hidden in the specified amount of time, the test fails.</p>\n<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.<br />\nSimilarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    // with default implicit timeout of 5000ms (can be overwritten in settings under 'globals.waitForConditionTimeout')\n    browser.waitForElementNotVisible('#dialog');\n\n    // specify the locate strategy (css selector/xpath) as the first argument\n    browser.waitForElementNotVisible('css selector', '#dialog');\n\n    // with explicit timeout (in milliseconds)\n    browser.waitForElementNotVisible('#dialog', 1000);\n\n    // continue if failed\n    browser.waitForElementNotVisible('#dialog', 1000, false);\n\n    // with callback\n    browser.waitForElementNotVisible('#dialog', 1000, function() {\n      // do something while we're here\n    });\n\n    // with custom output message - the locate strategy is required\n    browser.waitForElementNotVisible('css selector', '#dialog', 'The dialog container is not visible.');\n\n    // with custom Spanish message\n    browser.waitForElementNotVisible('#dialog', 1000, 'elemento %s no era visible en %d ms');\n\n    // many combinations possible - the message is always the last argument\n    browser.waitForElementNotVisible('#dialog', 1000, false, function() {}, 'elemento %s no era visible en %d ms');\n  },\n\n  'demo Test with selector objects': function(browser) {\n     browser.waitForElementNotVisible({\n       selector: '#dialog',\n       timeout: 1000\n     });\n\n     browser.waitForElementNotVisible({\n       selector: '#dialog',\n       locateStrategy: 'css selector'\n     }, 'Custom output message');\n\n     browser.waitForElementNotVisible({\n       selector: '.container',\n       index: 2,\n       retryInterval: 100,\n       abortOnFailure: true\n     });\n  }\n\n  'page object demo Test': function (browser) {\n     var nightwatch = browser.page.nightwatch();\n     nightwatch\n       .navigate()\n       .assert.titleContains('Nightwatch.js');\n\n     nightwatch.api.waitForElementNotVisible('@mainDialog', function(result) {\n       console.log(result);\n     });\n  }\n}","returns":null,"since":null,"see":["waitForElementVisible"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/waitForElementNotVisible.js?message=api-docs%3A%20update%20waitForElementNotVisible#","internal":false,"sortIndex":30,"display":null,"syntax":".waitForElementNotVisible([using], selector, [timeout], [pollInterval], [abortOnAssertionFailure], [callback], [message]);"}],"commands":[{"name":"getCookie","params":[{"name":"actionCallback","types":"function","descr":"","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"descr":"<p>Perform the .cookie() protocol action and pass the result to the supplied callback<br />\nwith the original &quot;this&quot; context</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getCookie.js?message=api-docs%3A%20update%20getCookie#","internal":false,"display":null,"syntax":""},{"name":"waitForElementNotPresent","params":[{"name":"response","types":"","descr":"","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"descr":"<p>Overriding elementFound to fail the test</p>","example":"","returns":{"type":"Promise","descr":""},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/element-commands/waitForElementNotPresent.js?message=api-docs%3A%20update%20waitForElementNotPresent#","internal":false,"display":null,"syntax":""}],"assertions":[{"name":"attributeContains","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"attribute","types":"string","descr":"<p>The attribute name</p>","optional":false},{"name":"expected","types":"string","descr":"<p>The expected contained value of the attribute to check.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given attribute of an element contains the expected value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.attributeContains('#someElement', 'href', 'google.com');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/attributeContains.js?message=api-docs%3A%20update%20attributeContains#","internal":false,"display":null,"syntax":""},{"name":"attributeEquals","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"attribute","types":"string","descr":"<p>The attribute name</p>","optional":false},{"name":"expected","types":"string","descr":"<p>The expected value of the attribute to check.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given attribute of an element has the expected value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.attributeEquals('body', 'data-attr', 'some value');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/attributeEquals.js?message=api-docs%3A%20update%20attributeEquals#","internal":false,"display":null,"syntax":""},{"name":"containsText","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"expectedText","types":"string","descr":"<p>The text to look for.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element contains the specified text.</p>\n<pre><code>  this.demoTest = function (browser) {\n    browser.assert.containsText('#main', 'The Night Watch');\n  };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/containsText.js?message=api-docs%3A%20update%20containsText#","internal":false,"display":null,"syntax":""},{"name":"cssClassNotPresent","params":[{"name":"selector","types":"string","descr":"<p>The selector (CSS / Xpath) used to locate the element.</p>","optional":false},{"name":"className","types":"string","descr":"<p>The CSS class to look for.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element does not have the specified CSS class.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.cssClassNotPresent('#main', 'container');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/cssClassNotPresent.js?message=api-docs%3A%20update%20cssClassNotPresent#","internal":false,"display":null,"syntax":""},{"name":"cssClassPresent","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"className","types":"string","descr":"<p>The CSS class to look for.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element has the specified CSS class. Multiple css classes can be specified either as an array or a space-delimited string.</p>\n<p>In case the expected value is a space delimited string, the order is not taken into account - each value will individually be checked against.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.cssClassPresent('#main', 'container');\n     browser.assert.cssClassPresent('#main', ['visible', 'container']);\n     browser.assert.cssClassPresent('#main', 'visible container');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/cssClassPresent.js?message=api-docs%3A%20update%20cssClassPresent#","internal":false,"display":null,"syntax":""},{"name":"cssProperty","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"cssProperty","types":"string","descr":"<p>The CSS property.</p>","optional":false},{"name":"expected","types":"string","descr":"<p>The expected value of the css property to check.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the specified css property of a given element has the expected value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.cssProperty('#main', 'display', 'block');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/cssProperty.js?message=api-docs%3A%20update%20cssProperty#","internal":false,"display":null,"syntax":""},{"name":"domPropertyContains","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"domProperty","types":"string","descr":"<p>The DOM property name.</p>","optional":false},{"name":"expected","types":"string","descr":"<p>The expected value of the DOM property to check.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the specified DOM property of a given element has the expected value. For all the available DOM element properties, consult the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">Element doc at MDN</a>.<br />\nSeveral properties can be specified (either as an array or command-separated list). Nightwatch will check each one for presence.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.domPropertyContains('#main', 'classList', 'visible');\n\n     // in case the resulting property is an array, several elements could be specified\n     browser.assert.domPropertyEquals('#main', 'classList', ['class-one', 'class-two']);\n     browser.assert.domPropertyEquals('#main', 'classList', 'class-one,class-two');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/domPropertyContains.js?message=api-docs%3A%20update%20domPropertyContains#","internal":false,"display":null,"syntax":""},{"name":"domPropertyEquals","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"domProperty","types":"string","descr":"<p>The DOM property name.</p>","optional":false},{"name":"expected","types":"string","descr":"<p>The expected value of the DOM property to check.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the specified DOM property of a given element has the expected value. For all the available DOM element properties, consult the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">Element doc at MDN</a>.<br />\nIf the result value is JSON object or array, a deep equality comparison will be performed.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.domPropertyEquals('#main', 'className', 'visible');\n\n     // deep equal will be performed\n     browser.assert.domPropertyEquals('#main', 'classList', ['class-one', 'class-two']);\n\n     // split on ',' and deep equal will be performed\n     browser.assert.domPropertyEquals('#main', 'classList', 'class-one,class-two']);\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/domPropertyEquals.js?message=api-docs%3A%20update%20domPropertyEquals#","internal":false,"display":null,"syntax":""},{"name":"elementNotPresent","params":[{"name":"selector","types":"string","descr":"<p>The selector (CSS / Xpath) used to locate the element.</p>","optional":false},{"name":"message","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element exists in the DOM.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.elementNotPresent(&quot;.should_not_exist&quot;);\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/elementNotPresent.js?message=api-docs%3A%20update%20elementNotPresent#","internal":false,"display":null,"syntax":""},{"name":"elementPresent","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"message","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element exists in the DOM.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.elementPresent(&quot;#main&quot;);\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/elementPresent.js?message=api-docs%3A%20update%20elementPresent#","internal":false,"display":null,"syntax":""},{"name":"enabled","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS / Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide/working-with-page-objects/#element-properties\">element properties</a>.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element is enabled (as indicated by the 'disabled' attribute).</p>\n<pre><code>this.demoTest = function (browser) {\n  browser.assert.enabled('.should_be_enabled');\n  browser.assert.enabled({selector: '.should_be_enabled'});\n  browser.assert.enabled({selector: '.should_be_enabled', suppressNotFoundErrors: true});\n};\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/enabled.js?message=api-docs%3A%20update%20enabled#","internal":false,"display":null,"syntax":""},{"name":"hidden","params":[{"name":"selector","types":"string","descr":"<p>The selector (CSS / Xpath) used to locate the element.</p>","optional":false},{"name":"message","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element is not visible on the page.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.hidden('.should_not_be_visible');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/hidden.js?message=api-docs%3A%20update%20hidden#","internal":false,"display":null,"syntax":""},{"name":"selected","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS / Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide/working-with-page-objects/#element-properties\">element properties</a>.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element is selected.</p>\n<pre><code>this.demoTest = function (browser) {\n  browser.assert.selected('.should_be_selected');\n  browser.assert.selected({selector: '.should_be_selected'});\n  browser.assert.selected({selector: '.should_be_selected', suppressNotFoundErrors: true});\n};\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/selected.js?message=api-docs%3A%20update%20selected#","internal":false,"display":null,"syntax":""},{"name":"title","params":[{"name":"expected","types":"string","descr":"<p>The expected page title.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the page title equals the given value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.titleContains('Nightwatch.js');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/titleContains.js?message=api-docs%3A%20update%20title#","internal":false,"display":null,"syntax":""},{"name":"title","params":[{"name":"expected","types":"string","descr":"<p>The expected page title.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the page title equals the given value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.title('Nightwatch.js');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/title.js?message=api-docs%3A%20update%20title#","internal":false,"display":null,"syntax":""},{"name":"urlContains","params":[{"name":"expected","types":"string","descr":"<p>The value expected to exist within the current URL.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the current URL contains the given value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.urlContains('nightwatchjs.org');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/urlContains.js?message=api-docs%3A%20update%20urlContains#","internal":false,"display":null,"syntax":""},{"name":"urlEquals","params":[{"name":"expected","types":"string","descr":"<p>The expected url.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the current url equals the given value.</p>\n<pre><code>   this.demoTest = function (client) {\n     browser.assert.urlEquals('https://www.google.com');\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/urlEquals.js?message=api-docs%3A%20update%20urlEquals#","internal":false,"display":null,"syntax":""},{"name":"value","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"expected","types":"string","descr":"<p>The expected text.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given form element's value equals the expected value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.value(&quot;form.login input[type=text]&quot;, &quot;username&quot;);\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/value.js?message=api-docs%3A%20update%20value#","internal":false,"display":null,"syntax":""},{"name":"valueContains","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS/Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide#element-properties\">element properties</a>.</p>","optional":false},{"name":"expected","types":"string","descr":"<p>The expected text.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given form element's value contains the expected value.</p>\n<pre><code>   this.demoTest = function (browser) {\n     browser.assert.valueContains(&quot;form.login input[type=text]&quot;, &quot;username&quot;);\n   };\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/valueContains.js?message=api-docs%3A%20update%20valueContains#","internal":false,"display":null,"syntax":""},{"name":"visible","params":[{"name":"definition","types":"string|object","descr":"<p>The selector (CSS / Xpath) used to locate the element. Can either be a string or an object which specifies <a href=\"https://nightwatchjs.org/guide/working-with-page-objects/#element-properties\">element properties</a>.</p>","optional":false},{"name":"msg","types":"string","descr":"<p>Optional log message to display in the output. If missing, one is displayed by default.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"assertions","descr":"<p>Checks if the given element is visible on the page.</p>\n<pre><code>this.demoTest = function (browser) {\n  browser.assert.visible('.should_be_visible');\n  browser.assert.visible({selector: '.should_be_visible'});\n  browser.assert.visible({selector: '.should_be_visible', suppressNotFoundErrors: true});\n};\n</code></pre>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/assertions/visible.js?message=api-docs%3A%20update%20visible#","internal":false,"display":null,"syntax":""}],"protocol.sessions":[{"name":"end","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Ends the session. Uses session protocol command.</p>","example":"this.demoTest = function (browser) {\n  browser.end();\n};","returns":null,"since":null,"see":["session"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/end.js?message=api-docs%3A%20update%20end#","internal":false,"display":null,"syntax":".end([callback])","more":"<h3 id=\"overview\">Overview</h3>\n<p>Behind the scenes, the <code>end</code> commands sends a <code>DELETE</code> request to the WebDriver server, passing the current <code>sessionId</code> property.\nAfter the <code>DELETE</code> is done, the <code>sessionId</code> is null-ed.</p>\n<p>If the <code>sessionId</code> is not set, the callback is invoked right away and complete event is signaled.</p>\n<h4 id=\"taking-screenshots-on-failures-errors\">Taking screenshots on failures/errors</h4>\n<p>If test failures or errors exist and screenshots are enabled, then screenshots are taken prior to sending the <code>DELETE</code>.</p>\n<p>To enable screenshots for test failures/errors, set the <code>screenshots</code> property in your <code>nightwatch.json</code>, under the desired  <code>test_settings</code> environment. E.g.:</p>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\" class=\" language-javascript\"><code class=\" language-javascript\">\n{\n  &quot;test_settings&quot; : {\n    &quot;default&quot; : {\n      &quot;screenshots&quot; : {\n        &quot;enabled&quot; : true,\n        &quot;on_failure&quot; : true,\n        &quot;path&quot; : &quot;./screens&quot;\n      }\n    }\n  }\n}\n</code></pre>\n</div>\n"},{"name":"getLog","params":[{"name":"typeString","types":"string|function","descr":"<p>Log type to request</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Gets a log from Selenium.</p>","example":"this.demoTest = function(client) {\n  this.getLog('browser', function(logEntriesArray) {\n    console.log('Log length: ' + logEntriesArray.length);\n    logEntriesArray.forEach(function(log) {\n       console.log('[' + log.level + '] ' + log.timestamp + ' : ' + log.message);\n     });\n  });\n};","returns":null,"since":null,"see":["getLogTypes"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getLog.js?message=api-docs%3A%20update%20getLog#","internal":false,"display":null,"syntax":".getLog([typeString], callback)"},{"name":"getLogTypes","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Gets the available log types. More info about log types in WebDriver can be found here: https://github.com/SeleniumHQ/selenium/wiki/Logging</p>","example":"this.demoTest = function(client) {\n  this.getLogTypes(function(typesArray) {\n    console.log(typesArray);\n  });\n};","returns":{"type":"Array","descr":" Available log types"},"since":null,"see":["sessionLogTypes"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getLogTypes.js?message=api-docs%3A%20update%20getLogTypes#","internal":false,"display":null,"syntax":".getLogTypes(callback)"},{"name":"isLogAvailable","params":[{"name":"typeString","types":"string|function","descr":"<p>Type of log to test</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Utility command to test if the log type is available.</p>","example":"this.demoTest = function(browser) {\n  browser.isLogAvailable('browser', function(isAvailable) {\n    // do something more in here\n  });\n}","returns":null,"since":null,"see":["getLogTypes"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/isLogAvailable.js?message=api-docs%3A%20update%20isLogAvailable#","internal":false,"display":null,"syntax":".isLogAvailable([typeString], callback)"},{"name":"session","params":[{"name":"action","types":"string","descr":"<p>The http verb to use, can be &quot;get&quot;, &quot;post&quot; or &quot;delete&quot;. If only the callback is passed, get is assumed by default.</p>","optional":true},{"name":"sessionId","types":"string","descr":"<p>The id of the session to get info about or delete.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#new-session","linkDisplay":"/#new-session","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Get info about, delete or create a new session. Defaults to the current session.</p>","example":"this.demoTest = function (browser) {\n   browser.session(function(result) {\n     console.log(result.value);\n   });\n   //\n   browser.session('delete', function(result) {\n     console.log(result.value);\n   });\n   //\n   browser.session('delete', '12345-abc', function(result) {\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/session.js?message=api-docs%3A%20update%20session#undefined","internal":false,"display":null,"syntax":".session([action], [sessionId], [callback])"},{"name":"sessionLog","params":[{"name":"typeString","types":"string","descr":"<p>Type of log to request. Can be one of: client, driver, browser, server</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Gets the text of the log type specified. To find out the available log types, use <code>.getLogTypes()</code>.</p>\n<p>Returns a <a href=\"https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#log-entry-json-object\">log entry JSON object</a>.</p>","example":" this.demoTest = function (browser) {\n   browser.sessionLog('client', function(result) {\n     console.log(result.value);\n   });\n}","returns":{"type":"Array","descr":" Array of the text entries of the log."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/sessionLog.js?message=api-docs%3A%20update%20sessionLog#","internal":false,"display":null,"syntax":".sessionLog(typeString, callback)"},{"name":"sessionLogTypes","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Gets an array of strings for which log types are available. This methods returns the entire WebDriver response, if you are only interested in the logs array, use <code>.getLogTypes()</code> instead.</p>","example":" this.demoTest = function (browser) {\n   browser.sessionLogTypes(function(result) {\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/sessionLogTypes.js?message=api-docs%3A%20update%20sessionLogTypes#","internal":false,"display":null,"syntax":""},{"name":"sessions","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Returns a list of the currently active sessions.</p>","example":" this.demoTest = function (browser) {\n   browser.sessions(function(result) {\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/sessions.js?message=api-docs%3A%20update%20sessions#undefined","internal":false,"display":null,"syntax":".sessions(callback)"},{"name":"status","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"status","linkDisplay":"/status","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Query the server's current status.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/status.js?message=api-docs%3A%20update%20status#","internal":false,"display":null,"syntax":".status([callback])"},{"name":"timeouts","params":[{"name":"type","types":"string","descr":"<p>The type of operation to set the timeout for. Valid values are &quot;script&quot; for script timeouts, &quot;implicit&quot; for modifying the implicit wait timeout and &quot;pageLoad&quot; (or &quot;page load&quot; for legacy JsonWire) for setting a page load timeout.</p>","optional":false},{"name":"ms","types":"number","descr":"<p>The amount of time, in milliseconds, that time-limited commands are permitted to run.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#set-timeout","linkDisplay":"/#set-timeout","jsonwire":false,"isW3C":false,"api":"protocol.sessions","descr":"<p>Configure or retrieve the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.</p>\n<p>If called with only a callback as argument, the command will return the existing configured timeout values.</p>","example":" this.demoTest = function (browser) {\n   browser.timeouts('script', 10000, function(result) {\n     console.log(result);\n   });\n\n   browser.timeouts(function(result) {\n     console.log('timeouts', result);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/timeouts.js?message=api-docs%3A%20update%20timeouts#undefined","internal":false,"display":null,"syntax":".timeouts([callback])\n.timeouts(type, ms, [callback])"},{"name":"timeoutsAsyncScript","params":[{"name":"ms","types":"number","descr":"<p>The amount of time, in milliseconds, that time-limited commands are permitted to run.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":"","isW3C":false,"api":"protocol.sessions","descr":"<p>Set the amount of time, in milliseconds, that asynchronous scripts executed by <code>.executeAsync</code> are permitted to run before they are aborted and a |Timeout| error is returned to the client.</p>","example":" this.demoTest = function (browser) {\n   browser.timeoutsAsyncScript(10000, function(result) {\n     console.log(result);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/timeoutsAsyncScript.js?message=api-docs%3A%20update%20timeoutsAsyncScript#","internal":false,"display":null,"syntax":".timeoutsAsyncScript(ms, [callback])"},{"name":"timeoutsImplicitWait","params":[{"name":"ms","types":"number","descr":"<p>The amount of time, in milliseconds, that time-limited commands are permitted to run.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":"","isW3C":false,"api":"protocol.sessions","descr":"<p>Set the amount of time the driver should wait when searching for elements. If this command is never sent, the driver will default to an implicit wait of 0ms.</p>","example":" this.demoTest = function (browser) {\n   browser.timeoutsImplicitWait(10000, function(result) {\n     console.log(result);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/timeoutsImplicitWait.js?message=api-docs%3A%20update%20timeoutsImplicitWait#","internal":false,"display":null,"syntax":".timeoutsImplicitWait(ms, [callback])"}],"protocol.cookies":[{"name":"cookie","params":[{"name":"method","types":"string","descr":"<p>Http method</p>","optional":false},{"name":"callbackOrCookie","types":"function|object","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#cookies","linkDisplay":"/#cookies","jsonwire":false,"isW3C":false,"api":"protocol.cookies","descr":"<p>Retrieve or delete all cookies visible to the current page or set a cookie. Normally this shouldn't be used directly, instead the cookie convenience methods should be used: <code>getCookie</code>, <code>getCookies</code>, <code>setCookie</code>, <code>deleteCookie</code>, <code>deleteCookies</code>.</p>","example":"","returns":null,"since":null,"see":["getCookies","getCookie","setCookie","deleteCookie","deleteCookies"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/cookie.js?message=api-docs%3A%20update%20cookie#","internal":false,"display":null,"syntax":""},{"name":"deleteCookie","params":[{"name":"cookieName","types":"string","descr":"<p>The name of the cookie to delete.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.cookies","descr":"<p>Delete the cookie with the given name. This command is a no-op if there is no such cookie visible to the current page.</p>","example":"this.demoTest = function(browser) {\n  browser.deleteCookie(\"test_cookie\", function() {\n    // do something more in here\n  });\n}","returns":null,"since":null,"see":["cookie"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/deleteCookie.js?message=api-docs%3A%20update%20deleteCookie#","internal":false,"display":null,"syntax":".deleteCookie(cookieName, [callback])"},{"name":"deleteCookies","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.cookies","descr":"<p>Delete all cookies visible to the current page.</p>","example":"this.demoTest = function(browser) {\n  browser.deleteCookies(function() {\n    // do something more in here\n  });\n}","returns":null,"since":null,"see":["cookie"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/deleteCookies.js?message=api-docs%3A%20update%20deleteCookies#","internal":false,"display":null,"syntax":".deleteCookies([callback])"},{"name":"getCookie","params":[{"name":"name","types":"string","descr":"<p>The cookie name.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.cookies","descr":"<p>Retrieve a single cookie visible to the current page. The cookie is returned as a cookie JSON object, as defined <a href=\"https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#cookie-json-object\">here</a>.</p>\n<p>Uses <code>cookie</code> protocol command.</p>","example":"this.demoTest = function(browser) {\n  browser.getCookie(name, function callback(result) {\n    this.assert.equal(result.value, '123456');\n    this.assert.equals(result.name, 'test_cookie');\n  });\n}","returns":{"type":"object|null","descr":" The cookie object as a selenium cookie JSON object or null if the cookie wasn't found."},"since":null,"see":["cookie"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getCookie.js?message=api-docs%3A%20update%20getCookie#","internal":false,"display":null,"syntax":".getCookie(name, callback)"},{"name":"getCookies","params":[{"name":"callback","types":"function","descr":"<p>The callback function which will receive the response as an argument.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.cookies","descr":"<p>Retrieve all cookies visible to the current page. The cookies are returned as an array of cookie JSON object, as defined <a href=\"https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#cookie-json-object\">here</a>.</p>\n<p>Uses <code>cookie</code> protocol command.</p>","example":"this.demoTest = function(browser) {\n  browser.getCookies(function callback(result) {\n    this.assert.equal(result.value.length, 1);\n    this.assert.equals(result.value[0].name, 'test_cookie');\n  });\n}","returns":{"type":"Array.<object>","descr":" A list of cookies."},"since":null,"see":["cookie"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getCookies.js?message=api-docs%3A%20update%20getCookies#","internal":false,"display":null,"syntax":".getCookies(callback)"},{"name":"setCookie","params":[{"name":"cookie","types":"object","descr":"<p>The cookie object.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.cookies","descr":"<p>Set a cookie, specified as a cookie JSON object, as defined <a href=\"https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#cookie-json-object\">here</a>.</p>\n<p>Uses <code>cookie</code> protocol command.</p>","example":"this.demoTest = function(browser) {\n  browser.setCookie({\n    name     : \"test_cookie\",\n    value    : \"test_value\",\n    path     : \"/\", (Optional)\n    domain   : \"example.org\", (Optional)\n    secure   : false, (Optional)\n    httpOnly : false, // (Optional)\n    expiry   : 1395002765 // (Optional) time in seconds since midnight, January 1, 1970 UTC\n  });\n}","returns":null,"since":null,"see":["cookie"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/setCookie.js?message=api-docs%3A%20update%20setCookie#","internal":false,"display":null,"syntax":".setCookie(cookie, [callback])"}],"protocol.utilities":[{"name":"pause","params":[{"name":"ms","types":"number","descr":"<p>The number of milliseconds to wait.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.utilities","descr":"<p>Suspends the test for the given time in milliseconds. If the milliseconds argument is missing it will suspend the test indefinitely</p>","example":"this.demoTest = function (browser) {\n  browser.pause(1000);\n  // or suspend indefinitely\n  browser.pause();\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/pause.js?message=api-docs%3A%20update%20pause#","internal":false,"display":null,"syntax":""},{"name":"perform","params":[{"name":"callback","types":"function","descr":"<p>The function to run as part of the queue.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.utilities","descr":"<p>A simple perform command which allows access to the Nightwatch API in a callback. Can be useful if you want to read variables set by other commands.</p>\n<p>The callback signature can have up to two parameters.</p>\n<ul>\n<li>no parameters: callback runs and perform completes immediately at the end of the execution of the callback.</li>\n<li>one parameter: allows for asynchronous execution within the callback providing a done callback function for completion as the first argument.</li>\n<li>two parameters: allows for asynchronous execution with the Nightwatch <code>api</code> object passed in as the first argument, followed by the done callback.</li>\n</ul>\n<p>In the case of asynchronous execution, the timeout can be controlled by setting the <code>asyncHookTimeout</code> global. See <a href=\"https://nightwatchjs.org/gettingstarted/concepts/#using-test-globals\">Using test globals</a> for more info.</p>","example":"this.demoTest = function (browser) {\n  var elementValue;\n  browser\n    .getValue('.some-element', function(result) {\n      elementValue = result.value;\n    })\n    // other stuff going on ...\n    //\n    // self-completing callback\n    .perform(function() {\n      console.log('elementValue', elementValue);\n      // without any defined parameters, perform\n      // completes immediately (synchronously)\n    })\n    //\n    // asynchronous completion\n    .perform(function(done) {\n      console.log('elementValue', elementValue);\n      // potentially other async stuff going on\n      // on finished, call the done callback\n      done();\n    })\n    //\n    // asynchronous completion including api (client)\n    .perform(function(client, done) {\n      console.log('elementValue', elementValue);\n      // similar to before, but now with client\n      // potentially other async stuff going on\n      // on finished, call the done callback\n      done();\n    });\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/perform.js?message=api-docs%3A%20update%20perform#","internal":false,"display":null,"syntax":""},{"name":"useCss","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.utilities","descr":"<p>Sets the locate strategy for selectors to <code>css selector</code>, therefore every following selector needs to be specified as css.</p>","example":"this.demoTest = function (browser) {\n  browser\n    .useCss() // we're back to CSS now\n    .setValue('input[type=text]', 'nightwatch');\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/useCss.js?message=api-docs%3A%20update%20useCss#","internal":false,"display":null,"syntax":""},{"name":"useXpath","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.utilities","descr":"<p>Sets the locate strategy for selectors to xpath, therefore every following selector needs to be specified as xpath.</p>","example":"this.demoTest = function (browser) {\n  browser\n    .useXpath() // every selector now must be xpath\n    .click(\"//tr[@data-recordid]/span[text()='Search Text']\");\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/useXpath.js?message=api-docs%3A%20update%20useXpath#","internal":false,"display":null,"syntax":""}],"protocol.contexts":[{"name":"closeWindow","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Close the current window. This can be useful when you're working with multiple windows open (e.g. an OAuth login).<br />\nUses <code>window</code> protocol command.</p>","example":"this.demoTest = function (client) {\n  client.closeWindow();\n};","returns":null,"since":null,"see":["window"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/closeWindow.js?message=api-docs%3A%20update%20closeWindow#","internal":false,"display":null,"syntax":""},{"name":"fullscreenWindow","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-fullscreen-window","linkDisplay":"/#dfn-fullscreen-window","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Sets the current window state to fullscreen.</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    browser.fullscreenWindow(function(result) {\n      console.log(result);\n    });\n  },\n\n  'ES6 async demo Test': async function(browser) {\n    const result = await browser.fullscreenWindow();\n    console.log('result value is:', result.value);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/fullscreenWindow.js?message=api-docs%3A%20update%20fullscreenWindow#","internal":false,"display":null,"syntax":""},{"name":"getWindowPosition","params":[{"name":"callback","types":"function","descr":"<p>Callback function to be called when the command finishes.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Retrieves the current window position.</p>\n<p>For clients which are compatible with the <a href=\"https://w3c.github.io/webdriver/\">W3C Webdriver API</a>, <code>getWindowPosition</code> is an alias of <code>getWindowRect</code>.</p>\n<p>The <code>getWindowRect</code> command returns both dimensions and position of the window, using the <code>windowRect</code> protocol command.</p>","example":"module.exports = {\n  'demo test .getWindowPosition()': function(browser) {\n     // Retrieve the attributes\n     browser.getWindowPosition(function(value) {\n       console.log(value);\n     });\n  },\n\n  'getWindowPosition ES6 demo test': async function(browser) {\n     const value = await browser.getWindowPosition();\n     console.log('value', value);\n  }\n}","returns":null,"since":null,"see":["windowRect"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getWindowPosition.js?message=api-docs%3A%20update%20getWindowPosition#","internal":false,"display":null,"syntax":".getWindowPosition([callback])"},{"name":"getWindowRect","params":[{"name":"callback","types":"function","descr":"<p>Callback function to be called when the command finishes.</p>","optional":false}],"link":"#dfn-get-window-rect","linkDisplay":"/#dfn-get-window-rect","jsonwire":false,"isW3C":"","api":"protocol.contexts","descr":"<p>Change or get the <a href=\"https://w3c.github.io/webdriver/#dfn-window-rect\">window rect</a>. This is defined as a dictionary of the <code>screenX</code>, <code>screenY</code>, <code>outerWidth</code> and <code>outerHeight</code> attributes of the window.</p>\n<p>Its JSON representation is the following:</p>\n<ul>\n<li><code>x</code> - window's screenX attribute;</li>\n<li><code>y</code> - window's screenY attribute;</li>\n<li><code>width</code> - outerWidth attribute;</li>\n<li><code>height</code> - outerHeight attribute.</li>\n</ul>\n<p>All attributes are in in CSS pixels. To change the window react, you can either specify <code>width</code> and <code>height</code>, <code>x</code> and <code>y</code> or all properties together.</p>","example":"module.exports = {\n  'demo test .getWindowRect()': function(browser) {\n     // Retrieve the attributes\n     browser.getWindowRect(function(value) {\n       console.log(value);\n     });\n  },\n\n  'getWindowRect ES6 demo test': async function(browser) {\n     const resultValue = await browser.getWindowRect();\n     console.log('result value', resultValue);\n  }\n}","returns":null,"since":null,"see":["windowRect"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getWindowRect.js?message=api-docs%3A%20update%20getWindowRect#","internal":false,"display":null,"syntax":""},{"name":"getWindowSize","params":[{"name":"callback","types":"function","descr":"<p>Callback function to be called when the command finishes.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Retrieves the current window size.</p>\n<p>For clients which are compatible with the <a href=\"https://w3c.github.io/webdriver/\">W3C Webdriver API</a>, <code>getWindowSize</code> is an alias of <code>getWindowRect</code>.</p>\n<p>The <code>getWindowRect</code> command returns both dimensions and position of the window, using the <code>windowRect</code> protocol command.</p>","example":"module.exports = {\n  'demo test .getWindowSize()': function(browser) {\n     // Retrieve the attributes\n     browser.getWindowSize(function(value) {\n       console.log(value);\n     });\n  },\n\n  'getWindowSize ES6 demo test': async function(browser) {\n     const value = await browser.getWindowSize();\n     console.log('value', value);\n  }\n}","returns":null,"since":null,"see":["windowRect"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getWindowSize.js?message=api-docs%3A%20update%20getWindowSize#","internal":false,"display":null,"syntax":".getWindowSize([callback])"},{"name":"maximizeWindow","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Maximizes the current window.</p>","example":" this.demoTest = function (browser) {\n   browser.maximizeWindow();\n };","returns":null,"since":null,"see":["windowMaximize"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/maximizeWindow.js?message=api-docs%3A%20update%20maximizeWindow#","internal":false,"display":null,"syntax":""},{"name":"minimizeWindow","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-minimize-window","linkDisplay":"/#dfn-minimize-window","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Hides the window in the system tray. If the window happens to be in fullscreen mode, it is restored the normal state then it will be &quot;iconified&quot; - minimize or hide the window from the visible screen.</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    browser.minimizeWindow(function(result) {\n      console.log(result);\n    });\n  },\n\n  'ES6 async demo Test': async function(browser) {\n    const result = await browser.minimizeWindow();\n    console.log('result value is:', result.value);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/minimizeWindow.js?message=api-docs%3A%20update%20minimizeWindow#","internal":false,"display":null,"syntax":""},{"name":"openNewWindow","params":[{"name":"type","types":"string","descr":"<p>Can be either &quot;tab&quot; or &quot;window&quot;, with &quot;tab&quot; set to default if none is specified.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-new-window","linkDisplay":"/#dfn-new-window","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Opens a new top-level browser window, which can be either a tab (default) or a separate new window.</p>\n<p>This command is only available for W3C Webdriver compatible browsers.</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n    // open a new window tab (default)\n    browser.openNewWindow(function(result) {\n      console.log(result);\n    });\n\n    // open a new window\n    browser.openNewWindow('window', function(result) {\n      console.log(result);\n    });\n  },\n\n  'ES6 async demo Test': async function(browser) {\n    const result = await browser.fullscreenWindow();\n    console.log('result value is:', result.value);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/openNewWindow.js?message=api-docs%3A%20update%20openNewWindow#","internal":false,"display":null,"syntax":""},{"name":"resizeWindow","params":[{"name":"width","types":"number","descr":"<p>The new window width.</p>","optional":false},{"name":"height","types":"number","descr":"<p>The new window height.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Resizes the current window.</p>","example":" this.demoTest = function (browser) {\n   browser.resizeWindow(1000, 800);\n };","returns":null,"since":null,"see":["windowSize"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/resizeWindow.js?message=api-docs%3A%20update%20resizeWindow#","internal":false,"display":null,"syntax":""},{"name":"setWindowPosition","params":[{"name":"offsetX","types":"number","descr":"<p>The new window offset x-position.</p>","optional":false},{"name":"offsetY","types":"number","descr":"<p>The new window offset y-position.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Sets the current window position.</p>","example":" this.demoTest = function (browser) {\n   browser.setWindowPosition(0, 0);\n };","returns":null,"since":null,"see":["windowPosition"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/setWindowPosition.js?message=api-docs%3A%20update%20setWindowPosition#","internal":false,"display":null,"syntax":""},{"name":"setWindowRect","params":[{"name":"options","types":"object","descr":"<p>An object specifying either <code>width</code> and <code>height</code>, <code>x</code> and <code>y</code>, or all together to set properties for the <a href=\"https://w3c.github.io/webdriver/#dfn-window-rect\">window rect</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-get-window-rect","linkDisplay":"/#dfn-get-window-rect","jsonwire":false,"isW3C":"","api":"protocol.contexts","descr":"<p>Change the <a href=\"https://w3c.github.io/webdriver/#dfn-window-rect\">window rect</a>. This is defined as a dictionary of the <code>screenX</code>, <code>screenY</code>, <code>outerWidth</code> and <code>outerHeight</code> attributes of the window.</p>\n<p>Its JSON representation is the following:</p>\n<ul>\n<li><code>x</code> - window's screenX attribute;</li>\n<li><code>y</code> - window's screenY attribute;</li>\n<li><code>width</code> - outerWidth attribute;</li>\n<li><code>height</code> - outerHeight attribute.</li>\n</ul>\n<p>All attributes are in in CSS pixels. To change the window react, you can either specify <code>width</code> and <code>height</code>, <code>x</code> and <code>y</code> or all properties together.</p>","example":"module.exports = {\n  'demo test .setWindowRect()': function(browser) {\n\n     // Change the screenX and screenY attributes of the window rect.\n     browser.setWindowRect({x: 500, y: 500});\n\n     // Change the width and height attributes of the window rect.\n     browser.setWindowRect({width: 600, height: 300});\n\n     // Retrieve the attributes\n     browser.setWindowRect(function(result) {\n       console.log(result.value);\n     });\n  },\n\n  'setWindowRect ES6 demo test': async function(browser) {\n     await browser.setWindowRect({\n       width: 600,\n       height: 300,\n       x: 100,\n       y: 100\n     });\n  }\n}","returns":null,"since":null,"see":["windowRect"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/setWindowRect.js?message=api-docs%3A%20update%20setWindowRect#","internal":false,"display":null,"syntax":".setWindowRect({width, height, x, y}, [callback]);"},{"name":"setWindowSize","params":[{"name":"width","types":"number","descr":"<p>The new window width in CSS pixels</p>","optional":false},{"name":"height","types":"number","descr":"<p>The new window height in CSS pixels</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Sets the current window size in CSS pixels.</p>","example":" this.demoTest = function (browser) {\n   browser.setWindowSize(400, 600);\n };","returns":null,"since":null,"see":["windowSize"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/setWindowSize.js?message=api-docs%3A%20update%20setWindowSize#","internal":false,"display":null,"syntax":""},{"name":"switchWindow","params":[{"name":"handleOrName","types":"string","descr":"<p>The server assigned window handle or the name attribute.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.contexts","descr":"<p>Change focus to another window. The window to change focus to may be specified by its server assigned window handle, or by the value of its name attribute.</p>\n<p>To find out the window handle use <code>windowHandles</code> command</p>","example":" this.demoTest = function (browser) {\n   browser.windowHandles(function(result) {\n     var handle = result.value[0];\n     browser.switchWindow(handle);\n   });\n };\n\n this.demoTestAsync = async function (browser) {\n   const result = await browser.windowHandles();\n   var handle = result.value[0];\n   browser.switchWindow(handle);\n };","returns":null,"since":null,"see":["window"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/switchWindow.js?message=api-docs%3A%20update%20switchWindow#","internal":false,"display":null,"syntax":""}],"protocol.navigation":[{"name":"back","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#back","linkDisplay":"/#back","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>Navigate backwards in the browser history, if possible (the equivalent of hitting the browser back button).</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/back.js?message=api-docs%3A%20update%20back#","internal":false,"display":null,"syntax":""},{"name":"forward","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#back","linkDisplay":"/#back","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>Navigate forward in the browser history, if possible (the equivalent of hitting the browser forward button).</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/forward.js?message=api-docs%3A%20update%20forward#","internal":false,"display":null,"syntax":""},{"name":"getTitle","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>Returns the title of the current page. Uses title protocol command.</p>","example":" this.demoTest = function (browser) {\n   browser.getTitle(function(title) {\n     this.assert.equal(typeof title, 'string');\n     this.assert.equal(title, 'Nightwatch.js');\n   });\n };","returns":{"type":"string","descr":" The page title."},"since":null,"see":["title"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/getTitle.js?message=api-docs%3A%20update%20getTitle#","internal":false,"display":null,"syntax":".getTitle(callback)"},{"name":"init","params":[{"name":"url","types":"string","descr":"<p>Url to navigate to.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>This command is an alias to url and also a convenience method when called without any arguments in the sense that it performs a call to .url() with passing the value of <code>launch_url</code> field from the settings file.<br />\nUses <code>url</code> protocol command.</p>","example":"this.demoTest = function (client) {\n  client.init();\n};","returns":null,"since":null,"see":["url"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/init.js?message=api-docs%3A%20update%20init#","internal":false,"display":null,"syntax":""},{"name":"refresh","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#refresh","linkDisplay":"/#refresh","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>Refresh the current page.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/refresh.js?message=api-docs%3A%20update%20refresh#","internal":false,"display":null,"syntax":""},{"name":"title","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-title","linkDisplay":"/#get-title","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>Get the current page title.</p>","example":" this.demoTest = function (browser) {\n   browser.title(function(result) {\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/title.js?message=api-docs%3A%20update%20title#","internal":false,"display":null,"syntax":""},{"name":"url","params":[{"name":"url","types":"string|function","descr":"<p>If missing, it will return the URL of the current page as an argument to the supplied callback.</p>","optional":true},{"name":"callback","types":"Function","descr":"","optional":true}],"link":"#go","linkDisplay":"/#go","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>Retrieve the URL of the current page or navigate to a new URL.</p>","example":"module.exports = {\n 'demo Test' : function(browser) {\n    browser.url(function(result) {\n      // return the current url\n      console.log(result);\n    });\n    //\n    // navigate to new url:\n    browser.url('{URL}');\n    //\n    //\n    // navigate to new url:\n    browser.url('{URL}', function(result) {\n      console.log(result);\n    });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/url.js?message=api-docs%3A%20update%20url#","internal":false,"display":null,"syntax":".url([url], [callback])\n.url(callback)"},{"name":"urlHash","params":[{"name":"hash","types":"string","descr":"<p>The hash to add/replace to the current url (i.e. the value set in the launch_url property in nightwatch.json).</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.navigation","descr":"<p>Convenience command that adds the specified hash (i.e. url fragment) to the current value of the <code>launch_url</code> as set in <code>nightwatch.json</code>.</p>","example":"this.demoTest = function (client) {\n  client.urlHash('#hashvalue');\n  // or\n  client.urlHash('hashvalue');\n};","returns":null,"since":null,"see":["url"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/urlHash.js?message=api-docs%3A%20update%20urlHash#","internal":false,"display":null,"syntax":""}],"protocol.document":[{"name":"execute","params":[{"name":"body","types":"string|function","descr":"<p>The function body to be injected.</p>","optional":false},{"name":"args","types":"Array","descr":"<p>An array of arguments which will be passed to the function.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#executing-script","linkDisplay":"/#executing-script","jsonwire":false,"isW3C":false,"api":"protocol.document","descr":"<p>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. The executed script is assumed to be synchronous.<br />\nThe script argument defines the script to execute in the form of a function body. The value returned by that function will be returned to the client.</p>\n<p>The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified.</p>\n<p>Under the hood, if the <code>body</code> param is a function it is converted to a string with <code>function.toString()</code>. Any references to your current scope are ignored.</p>\n<p>To ensure cross-browser compatibility, the specified function should not be in ES6 format (i.e. <code>() =&gt; {}</code>). If the execution of the function fails, the first argument of the callback contains error information.</p>","example":" this.demoTest = function (browser) {\n   browser.execute(function(imageData) {\n     // resize operation\n     return true;\n   }, [imageData], function(result) {\n     // result.value === true\n   });\n}","returns":{"type":"*","descr":" The script result."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/execute.js?message=api-docs%3A%20update%20execute#","internal":false,"display":null,"syntax":""},{"name":"executeAsync","params":[{"name":"script","types":"string|function","descr":"<p>The function body to be injected.</p>","optional":false},{"name":"args","types":"Array","descr":"<p>An array of arguments which will be passed to the function.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#execute-async-script","linkDisplay":"/#execute-async-script","jsonwire":false,"isW3C":false,"api":"protocol.document","descr":"<p>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. The executed script is assumed to be asynchronous.</p>\n<p>The function to be injected receives the <code>done</code> callback as argument which needs to be called when the asynchronous operation finishes. The value passed to the <code>done</code> callback is returned to the client.<br />\nAdditional arguments for the injected function may be passed as a non-empty array which will be passed before the <code>done</code> callback.</p>\n<p>Asynchronous script commands may not span page loads. If an unload event is fired while waiting for the script result, an error will be returned.</p>","example":" this.demoTest = function (browser) {\n   browser.executeAsync(function(done) {\n     setTimeout(function() {\n       done(true);\n     }, 500);\n   }, function(result) {\n     // result.value === true\n   });\n\n   browser.executeAsync(function(arg1, arg2, done) {\n     setTimeout(function() {\n       done(true);\n     }, 500);\n   }, [arg1, arg2], function(result) {\n     // result.value === true\n   });\n}","returns":{"type":"*","descr":" The script result."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/executeAsync.js?message=api-docs%3A%20update%20executeAsync#","internal":false,"display":null,"syntax":"","more":"<h4 id=\"example\">Example</h4>\n<div class=\"sample-test\">\n<pre data-language=\"javascript\" class=\" language-javascript\"><code class=\" language-javascript\">\nmodule.exports = {\n  before : function(browser) {\n    // see <a href=\"https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12\">https://github.com/nightwatchjs/nightwatch/blob/main/examples/globalsModule.js#L12</a>\n    browser.globals.waitForConditionTimeout = 5000;\n  },\n\n  &#39;executeAsync example test&#39; : function (browser) {\n\n    browser\n      .timeoutsAsyncScript(10000)\n      .executeAsync(function (inputVal, done) {\n          // ... do stuff with window ...\n          setTimeout(done, 5000, &#39;result&#39;);\n        },\n        [&#39;input&#39;],\n        function (resultVal) {\n          console.log(&#39;result =&#39;, resultVal);\n        }\n      );\n  },\n\n  after : function(browser) {\n    browser.end();\n  }\n};\n</code></pre></div>\n"},{"name":"injectScript","params":[{"name":"scriptUrl","types":"string","descr":"<p>The script file url</p>","optional":false},{"name":"id","types":"string","descr":"<p>Dom element id to be set on the script tag.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.document","descr":"<p>Utility command to load an external script into the page specified by url.</p>","example":"this.demoTest = function(client) {\n  this.injectScript(\"{script-url}\", function() {\n    // we're all done here.\n  });\n};","returns":{"type":"HTMLScriptElement","descr":" The newly created script tag."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/injectScript.js?message=api-docs%3A%20update%20injectScript#","internal":false,"display":null,"syntax":""},{"name":"source","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#getting-page-source","linkDisplay":"/#getting-page-source","jsonwire":false,"isW3C":false,"api":"protocol.document","descr":"<p>Returns a string serialisation of the DOM of the current page.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/source.js?message=api-docs%3A%20update%20source#","internal":false,"display":null,"syntax":""}],"protocol.screens":[{"name":"saveScreenshot","params":[{"name":"fileName","types":"string","descr":"<p>The complete path to the file name where the screenshot should be saved.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.screens","descr":"<p>Take a screenshot of the current page and saves it as the given filename.</p>","example":" this.demoTest = function (browser) {\n   browser.saveScreenshot('/path/to/fileName.png');\n };","returns":null,"since":null,"see":["screenshot"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/client-commands/saveScreenshot.js?message=api-docs%3A%20update%20saveScreenshot#","internal":false,"display":null,"syntax":""},{"name":"screenshot","params":[{"name":"log_screenshot_data","types":"boolean","descr":"<p>Whether or not the screenshot data should appear in the logs when running with --verbose</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#take-screenshot","linkDisplay":"/#take-screenshot","jsonwire":false,"isW3C":false,"api":"protocol.screens","descr":"<p>Take a screenshot of the current page.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/screenshot.js?message=api-docs%3A%20update%20screenshot#","internal":false,"display":null,"syntax":""}],"protocol.mobile":[{"name":"contexts","params":[{"name":"callback","types":"function","descr":"<p>Callback function to be called when the command finishes.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.mobile","descr":"<p>Get a list of the available contexts.</p>\n<p>Used by Appium when testing hybrid mobile web apps. More info here: https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/hybrid.md.</p>","example":"","returns":{"type":"Array","descr":" an array of strings representing available contexts, e.g 'WEBVIEW', or 'NATIVE'"},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/contexts.js?message=api-docs%3A%20update%20contexts#","internal":false,"display":null,"syntax":""},{"name":"currentContext","params":[{"name":"callback","types":"function","descr":"<p>Callback function to be called when the command finishes.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.mobile","descr":"<p>Get current context.</p>","example":"","returns":{"type":"string|null","descr":" a string representing the current context or `null`, representing \"no context\""},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/currentContext.js?message=api-docs%3A%20update%20currentContext#","internal":false,"display":null,"syntax":""},{"name":"getOrientation","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.mobile","descr":"<p>Get the current browser orientation.</p>","example":"","returns":{"type":"string} The current browser orientation: {LANDSCAPE|PORTRAIT","descr":""},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/getOrientation.js?message=api-docs%3A%20update%20getOrientation#","internal":false,"display":null,"syntax":""},{"name":"setContext","params":[{"name":"context","types":"string","descr":"<p>context name to switch to - a string representing an available context.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.mobile","descr":"<p>Sets the context.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/setContext.js?message=api-docs%3A%20update%20setContext#","internal":false,"display":null,"syntax":""},{"name":"setOrientation","params":[{"name":"orientation","types":"string","descr":"<p>The new browser orientation: {LANDSCAPE|PORTRAIT}</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.mobile","descr":"<p>Sets the browser orientation.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/setOrientation.js?message=api-docs%3A%20update%20setOrientation#","internal":false,"display":null,"syntax":""}],"protocol.userprompts":[{"name":"acceptAlert","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#accept-alert","linkDisplay":"/#accept-alert","jsonwire":false,"isW3C":false,"api":"protocol.userprompts","descr":"<p>Accepts the currently displayed alert dialog. Usually, this is equivalent to clicking on the 'OK' button in the dialog.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/acceptAlert.js?message=api-docs%3A%20update%20acceptAlert#","internal":false,"display":null,"syntax":""},{"name":"dismissAlert","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dismiss-alert","linkDisplay":"/#dismiss-alert","jsonwire":false,"isW3C":false,"api":"protocol.userprompts","descr":"<p>Dismisses the currently displayed alert dialog. For confirm() and prompt() dialogs, this is equivalent to clicking the 'Cancel' button.</p>\n<p>For alert() dialogs, this is equivalent to clicking the 'OK' button.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/dismissAlert.js?message=api-docs%3A%20update%20dismissAlert#","internal":false,"display":null,"syntax":""},{"name":"getAlertText","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-alert-text","linkDisplay":"/#get-alert-text","jsonwire":false,"isW3C":false,"api":"protocol.userprompts","descr":"<p>Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.</p>","example":"","returns":{"type":"string","descr":" The text of the currently displayed alert."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/getAlertText.js?message=api-docs%3A%20update%20getAlertText#","internal":false,"display":null,"syntax":""},{"name":"setAlertText","params":[{"name":"value","types":"string","descr":"<p>Keystrokes to send to the prompt() dialog</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#send-alert-text","linkDisplay":"/#send-alert-text","jsonwire":false,"isW3C":false,"api":"protocol.userprompts","descr":"<p>Sends keystrokes to a JavaScript prompt() dialog.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/setAlertText.js?message=api-docs%3A%20update%20setAlertText#","internal":false,"display":null,"syntax":""}],"protocol.useractions":[{"name":"doubleClick","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.useractions","descr":"<p>Double-clicks at the current mouse coordinates (set by <code>.moveTo()</code>).</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/doubleClick.js?message=api-docs%3A%20update%20doubleClick#","internal":false,"display":null,"syntax":""},{"name":"keys","params":[{"name":"keysToSend","types":"Array|string","descr":"<p>The keys sequence to be sent.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.useractions","descr":"<p>Send a sequence of key strokes to the active element. The sequence is defined in the same format as the <code>sendKeys</code> command.<br />\nAn object map with available keys and their respective UTF-8 characters, as defined on <a href=\"https://www.w3.org/TR/webdriver/#character-types\">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>client.Keys</code>.</p>\n<p>Rather than the <code>setValue</code>, the modifiers are not released at the end of the call. The state of the modifier keys is kept between calls, so mouse interactions can be performed while modifier keys are depressed. Pass <code>client.keys.NULL</code> to the keys function to release modifiers.</p>","example":"module.exports = {\n 'demo Test': function(browser) {\n   browser\n     .keys(browser.Keys.CONTROL) // hold down CONTROL key\n     .click('#element')\n     .keys(browser.Keys.NULL) // release all keys\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/keys.js?message=api-docs%3A%20update%20keys#","internal":false,"display":null,"syntax":""},{"name":"mouseButtonClick","params":[{"name":"button","types":"string|number","descr":"<p>The mouse button</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.useractions","descr":"<p>Click at the current mouse coordinates (set by <code>.moveTo()</code>).</p>\n<p>The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/mouseButtonClick.js?message=api-docs%3A%20update%20mouseButtonClick#","internal":false,"display":null,"syntax":""},{"name":"mouseButtonDown","params":[{"name":"button","types":"string|number","descr":"<p>The mouse button</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.useractions","descr":"<p>Click and hold the left mouse button (at the coordinates set by the last <code>moveTo</code> command). Note that the next mouse-related command that should follow is <code>mouseButtonUp</code> . Any other mouse command (such as click or another call to buttondown) will yield undefined behaviour.</p>\n<p>Can be used for implementing drag-and-drop. The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button, and if you don't pass in a button but do pass in a callback, it will handle it correctly.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/mouseButtonDown.js?message=api-docs%3A%20update%20mouseButtonDown#","internal":false,"display":null,"syntax":""},{"name":"mouseButtonUp","params":[{"name":"button","types":"string|number","descr":"<p>The mouse button</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.useractions","descr":"<p>Releases the mouse button previously held (where the mouse is currently at). Must be called once for every <code>mouseButtonDown</code> command issued.</p>\n<p>Can be used for implementing drag-and-drop. The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button, and if you don't pass in a button but do pass in a callback, it will handle it correctly.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/mouseButtonUp.js?message=api-docs%3A%20update%20mouseButtonUp#","internal":false,"display":null,"syntax":""},{"name":"moveTo","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> assigned to the element to move to. If not specified or is null, the offset is relative to current position of the mouse.</p>","optional":true},{"name":"xoffset","types":"number","descr":"<p>X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.</p>","optional":false},{"name":"yoffset","types":"number","descr":"<p>Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.useractions","descr":"<p>Move the mouse by an offset of the specified <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> or relative to the current mouse cursor, if no element is specified. If an element is provided but no offset, the mouse will be moved to the center of the element.</p>\n<p>If an element is provided but no offset, the mouse will be moved to the center of the element. If the element is not visible, it will be scrolled into view.</p>","example":"this.demoTest = function (browser) {\n  browser.moveTo(null, 110, 100);\n};","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/moveTo.js?message=api-docs%3A%20update%20moveTo#undefined","internal":false,"display":null,"syntax":".moveTo([webElementId], xoffset, yoffset, [callback])\n.moveTo(null, xoffset, yoffset, [callback])"}],"protocol.frames":[{"name":"frame","params":[{"name":"frameId","types":"string|number","descr":"<p>Identifier for the frame to change focus to.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#switch-to-frame","linkDisplay":"/#switch-to-frame","jsonwire":false,"isW3C":false,"api":"protocol.frames","descr":"<p>Change focus to another frame on the page. If the frame id is missing or null, the server should switch to the page's default content.</p>","example":" this.demoTest = function (browser) {\n   browser.frame('<ID>', function(result) {\n     console.log(result);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/frame.js?message=api-docs%3A%20update%20frame#","internal":false,"display":null,"syntax":""},{"name":"frameParent","params":[{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#switch-to-parent-frame","linkDisplay":"/#switch-to-parent-frame","jsonwire":false,"isW3C":false,"api":"protocol.frames","descr":"<p>Change focus to the parent context. If the current context is the top level browsing context, the context remains unchanged.</p>","example":" this.demoTest = function (browser) {\n   browser.frameParent(function(result) {\n     console.log(result);\n   });\n}","returns":null,"since":"v0.4.8","see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/frameParent.js?message=api-docs%3A%20update%20frameParent#","internal":false,"display":null,"syntax":""}],"protocol.elementinternal":[{"name":"elementIdAttribute","params":[{"name":"webElementId","types":"string","descr":"<p>ID of the element to route the command to.</p>","optional":false},{"name":"attributeName","types":"string","descr":"<p>The attribute name</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-element-attribute","linkDisplay":"/#get-element-attribute","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Get the value of an element's attribute.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdAttribute.js?message=api-docs%3A%20update%20elementIdAttribute#","internal":true,"display":null,"syntax":""},{"name":"elementIdClear","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-element-clear","linkDisplay":"/#dfn-element-clear","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Scrolls into view a submittable element excluding buttons or editable element, and then attempts to clear its value, reset the checked state, or text content.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdClear.js?message=api-docs%3A%20update%20elementIdClear#","internal":true,"display":null,"syntax":""},{"name":"elementIdClick","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#element-click","linkDisplay":"/#element-click","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Scrolls into view the element and clicks the in-view center point. If the element is not pointer-interactable, an <code>element not interactable</code> error is returned.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdClick.js?message=api-docs%3A%20update%20elementIdClick#","internal":true,"display":null,"syntax":""},{"name":"elementIdCssProperty","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"cssPropertyName","types":"string","descr":"","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-element-css-value","linkDisplay":"/#get-element-css-value","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Retrieve the computed value of the given CSS property of the given element.</p>\n<p>The CSS property to query should be specified using the CSS property name, not the JavaScript property name (e.g. background-color instead of backgroundColor).</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdCssProperty.js?message=api-docs%3A%20update%20elementIdCssProperty#","internal":true,"display":null,"syntax":""},{"name":"elementIdDisplayed","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#element-displayedness","linkDisplay":"/#element-displayedness","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Determine if an element is currently displayed.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdDisplayed.js?message=api-docs%3A%20update%20elementIdDisplayed#","internal":true,"display":null,"syntax":""},{"name":"elementIdEnabled","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#is-element-enabled","linkDisplay":"/#is-element-enabled","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Determine if an element is currently enabled.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdEnabled.js?message=api-docs%3A%20update%20elementIdEnabled#","internal":true,"display":null,"syntax":""},{"name":"elementIdLocation","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Determine an element's location on the page. The point (0, 0) refers to the upper-left corner of the page.</p>\n<p>The element's coordinates are returned as a JSON object with x and y properties.</p>","example":"","returns":{"type":"object","descr":" The X and Y coordinates for the element on the page."},"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdLocation.js?message=api-docs%3A%20update%20elementIdLocation#","internal":false,"display":null,"syntax":""},{"name":"elementIdLocationInView","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Determine an element's location on the screen once it has been scrolled into view.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdLocationInView.js?message=api-docs%3A%20update%20elementIdLocationInView#","internal":false,"display":null,"syntax":""},{"name":"elementIdName","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-element-tag-name","linkDisplay":"/#get-element-tag-name","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Retrieve the qualified tag name of the given element.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdName.js?message=api-docs%3A%20update%20elementIdName#","internal":true,"display":null,"syntax":""},{"name":"elementIdProperty","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"DOMPropertyName","types":"string","descr":"","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-element-property","linkDisplay":"/#get-element-property","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Retrieve the value of a specified DOM property for the given element. For all the available DOM element properties, consult the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\">Element doc at MDN</a>.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdProperty.js?message=api-docs%3A%20update%20elementIdProperty#","internal":true,"display":null,"syntax":""},{"name":"elementIdSelected","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#is-element-selected","linkDisplay":"/#is-element-selected","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Determine if an OPTION element, or an INPUT element of type checkbox or radio button is currently selected.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdSelected.js?message=api-docs%3A%20update%20elementIdSelected#","internal":true,"display":null,"syntax":""},{"name":"elementIdSize","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Determine an element's size in pixels. The size will be returned as a JSON object with width and height properties.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdSize.js?message=api-docs%3A%20update%20elementIdSize#","internal":true,"display":null,"syntax":""},{"name":"elementIdText","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-element-text","linkDisplay":"/#get-element-text","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Returns the visible text for the element.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdText.js?message=api-docs%3A%20update%20elementIdText#","internal":true,"display":null,"syntax":""},{"name":"elementIdValue","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"value","types":"string|array|none","descr":"<p>Value to send to element in case of a POST</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#element-send-keys","linkDisplay":"/#element-send-keys","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Scrolls into view the form control element and then sends the provided keys to the element, or returns the current value of the element. In case the element is not keyboard interactable, an <code>element not interactable error</code> is returned.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/elementIdValue.js?message=api-docs%3A%20update%20elementIdValue#","internal":true,"display":null,"syntax":""},{"name":"submit","params":[{"name":"webElementId","types":"string","descr":"<p>The <a href=\"https://www.w3.org/TR/webdriver1/#dfn-web-elements\">Web Element ID</a> of the element to route the command to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":false,"isW3C":false,"api":"protocol.elementinternal","descr":"<p>Submit a FORM element. The submit command may also be applied to any element that is a descendant of a FORM element.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/submit.js?message=api-docs%3A%20update%20submit#","internal":false,"display":null,"syntax":""}],"protocol.window":[{"name":"window","params":[{"name":"method","types":"string","descr":"<p>The HTTP method to use. Can be either <code>POST</code> (change focus) or <code>DELETE</code> (close window).</p>","optional":false},{"name":"handleOrName","types":"string","descr":"<p>The window to change focus to.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#switch-to-window","linkDisplay":"/#switch-to-window","jsonwire":false,"isW3C":false,"api":"protocol.window","descr":"<p>Change focus to another window or close the current window. Shouldn't normally be used directly, instead <code>.switchWindow()</code> and <code>.closeWindow()</code> should be used.</p>","example":"","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/window.js?message=api-docs%3A%20update%20window#","internal":false,"display":null,"syntax":".window(httpMethod, handleOrName, [callback])"},{"name":"windowHandle","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-window-handle","linkDisplay":"/#get-window-handle","jsonwire":false,"isW3C":false,"api":"protocol.window","descr":"<p>Retrieve the current window handle.</p>","example":" this.demoTest = function (browser) {\n   browser.windowHandle(function(result) {\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/windowHandle.js?message=api-docs%3A%20update%20windowHandle#","internal":false,"display":null,"syntax":""},{"name":"windowHandles","params":[{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"#get-window-handles","linkDisplay":"/#get-window-handles","jsonwire":false,"isW3C":false,"api":"protocol.window","descr":"<p>Retrieve the list of all window handles available to the session.</p>","example":" this.demoTest = function (browser) {\n   browser.windowHandles(function(result) {\n     // An array of window handles.\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/windowHandles.js?message=api-docs%3A%20update%20windowHandles#","internal":false,"display":null,"syntax":""},{"name":"windowMaximize","params":[{"name":"handleOrName","types":"string","descr":"<p>Only required when using non-W3C Webdriver protocols (such as JSONWire). windowHandle URL parameter; if it is &quot;current&quot;, the currently active window will be maximized.</p>","optional":true},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-maximize-window","linkDisplay":"/#dfn-maximize-window","jsonwire":false,"isW3C":false,"api":"protocol.window","descr":"<p>Increases the window to the maximum available size without going full-screen.</p>","example":"module.exports = {\n 'demo Test with W3C Webdriver clients': function(browser) {\n    // W3C Webdriver API doesn't require the window handle parameter anymore\n    browser.windowMaximize(function(result) {\n      console.log(result);\n    });\n  },\n\n  'ES6 async demo Test': async function(browser) {\n    const result = await browser.windowMaximize();\n    console.log('result value is:', result.value);\n  },\n\n  'when using JSONWire (deprecated) clients': function(browser) {\n     browser.windowMaximize('current', function(result) {\n       console.log(result);\n     });\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/windowMaximize.js?message=api-docs%3A%20update%20windowMaximize#","internal":false,"display":null,"syntax":""},{"name":"windowPosition","params":[{"name":"windowHandle","types":"string","descr":"","optional":false},{"name":"offsetX","types":"number","descr":"","optional":false},{"name":"offsetY","types":"number","descr":"","optional":false},{"name":"callback","types":"function","descr":"<p>Callback function which is called with the result value.</p>","optional":false}],"link":"","linkDisplay":"","jsonwire":"","isW3C":false,"api":"protocol.window","descr":"<p>Change or get the position of the specified window. If the second argument is a function it will be used as a callback and the call will perform a get request to retrieve the existing window position.</p>","example":" this.demoTest = function (browser) {\n\n   // Change the position of the specified window.\n   // If the :windowHandle URL parameter is \"current\", the currently active window will be moved.\n   browser.windowPosition('current', 0, 0, function(result) {\n     console.log(result);\n   });\n\n   // Get the position of the specified window.\n   // If the :windowHandle URL parameter is \"current\", the position of the currently active window will be returned.\n   browser.windowPosition('current', function(result) {\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":["windowRect"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/windowPosition.js?message=api-docs%3A%20update%20windowPosition#","internal":false,"display":null,"syntax":""},{"name":"windowRect","params":[{"name":"options","types":"object","descr":"<p>An object specifying either <code>width</code> and <code>height</code>, <code>x</code> and <code>y</code>, or all together to set properties for the <a href=\"https://w3c.github.io/webdriver/#dfn-window-rect\">window rect</a>.</p>","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"#dfn-get-window-rect","linkDisplay":"/#dfn-get-window-rect","jsonwire":false,"isW3C":"","api":"protocol.window","descr":"<p>Change or get the <a href=\"https://w3c.github.io/webdriver/#dfn-window-rect\">window rect</a>. This is defined as a dictionary of the <code>screenX</code>, <code>screenY</code>, <code>outerWidth</code> and <code>outerHeight</code> attributes of the window.</p>\n<p>Its JSON representation is the following:</p>\n<ul>\n<li><code>x</code> - window's screenX attribute;</li>\n<li><code>y</code> - window's screenY attribute;</li>\n<li><code>width</code> - outerWidth attribute;</li>\n<li><code>height</code> - outerHeight attribute.</li>\n</ul>\n<p>All attributes are in in CSS pixels. To change the window react, you can either specify <code>width</code> and <code>height</code>, <code>x</code> and <code>y</code> or all properties together.</p>","example":"module.exports = {\n  'demo test .windowRect()': function(browser) {\n\n     // Change the screenX and screenY attributes of the window rect.\n     browser.windowRect({x: 500, y: 500});\n\n     // Change the width and height attributes of the window rect.\n     browser.windowRect({width: 600, height: 300});\n\n     // Retrieve the attributes\n     browser.windowRect(function(result) {\n       console.log(result.value);\n     });\n  },\n\n  'windowRect ES6 demo test': async function(browser) {\n     const resultValue = await browser.windowRect();\n     console.log('result value', resultValue);\n  }\n}","returns":null,"since":null,"see":[],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/windowRect.js?message=api-docs%3A%20update%20windowRect#","internal":false,"display":null,"syntax":".windowRect({width, height, x, y}, [callback]);"},{"name":"windowSize","params":[{"name":"windowHandle","types":"string","descr":"","optional":false},{"name":"width","types":"number","descr":"","optional":false},{"name":"height","types":"number","descr":"","optional":false},{"name":"callback","types":"function","descr":"<p>Optional callback function to be called when the command finishes.</p>","optional":true}],"link":"","linkDisplay":"","jsonwire":"","isW3C":false,"api":"protocol.window","descr":"<p>Change or get the size of the specified window. If the second argument is a function it will be used as a callback and the call will perform a get request to retrieve the existing window size.</p>","example":" this.demoTest = function (browser) {\n\n   // Return the size of the specified window. If the :windowHandle URL parameter is \"current\", the size of the currently active window will be returned.\n   browser.windowSize('current', function(result) {\n     console.log(result.value);\n   });\n\n   // Change the size of the specified window.\n   // If the :windowHandle URL parameter is \"current\", the currently active window will be resized.\n   browser.windowSize('current', 300, 300, function(result) {\n     console.log(result.value);\n   });\n}","returns":null,"since":null,"see":["windowRect"],"aliases":[],"editLink":"https://github.com/nightwatchjs/nightwatch/edit/main/lib/api/protocol/windowSize.js?message=api-docs%3A%20update%20windowSize#","internal":false,"display":null,"syntax":""}]}