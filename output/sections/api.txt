<div class="background">
  <div class="container bs-docs-container">
  <div class="row">
  <div class="col-md-3">
    <div class="bs-sidebar hidden-print" role="complementary">
      <ul class="nav bs-sidenav">
        <li>
          <a href="#expect-api">Expect</a>
          <ul class="nav">
            <li><a href="#expect-chains">language chains</a></li>
            <li><a href="#expect-matchers">equal / contain / match</a></li>
            <li><a href="#expect-startend">startWith / endWith</a></li>
            <li><a href="#expect-negation">not</a></li>
            <li><a href="#expect-before">before / after</a></li>
            
            <li><a href="#expect-a">a / an</a></li>
            
            <li><a href="#expect-active">active</a></li>
            
            <li><a href="#expect-attribute">attribute</a></li>
            
            <li><a href="#expect-count">count</a></li>
            
            <li><a href="#expect-css">css</a></li>
            
            <li><a href="#expect-enabled">enabled</a></li>
            
            <li><a href="#expect-height">height</a></li>
            
            <li><a href="#expect-present">present</a></li>
            
            <li><a href="#expect-selected">selected</a></li>
            
            <li><a href="#expect-text">text</a></li>
            
            <li><a href="#expect-value">value</a></li>
            
            <li><a href="#expect-value">value / an</a></li>
            
            <li><a href="#expect-value">value / an</a></li>
            
            <li><a href="#expect-value">value / an</a></li>
            
            <li><a href="#expect-visible">visible</a></li>
            
            <li><a href="#expect-width">width</a></li>
            
            <li><a href="#expect-width">width</a></li>
            
            <li><a href="#expect-width">width</a></li>
            
          </ul>
        </li>

        <li>
          <a href="#assertions">Assert</a>
          <ul class="nav">
          
            <li><a href="#assert-attributeContains">attributeContains</a></li>
          
            <li><a href="#assert-attributeEquals">attributeEquals</a></li>
          
            <li><a href="#assert-containsText">containsText</a></li>
          
            <li><a href="#assert-cssClassPresent">cssClassPresent</a></li>
          
            <li><a href="#assert-cssClassNotPresent">cssClassNotPresent</a></li>
          
            <li><a href="#assert-cssProperty">cssProperty</a></li>
          
            <li><a href="#assert-elementPresent">elementPresent</a></li>
          
            <li><a href="#assert-elementNotPresent">elementNotPresent</a></li>
          
            <li><a href="#assert-hidden">hidden</a></li>
          
            <li><a href="#assert-title">title</a></li>
          
            <li><a href="#assert-urlContains">urlContains</a></li>
          
            <li><a href="#assert-urlEquals">urlEquals</a></li>
          
            <li><a href="#assert-value">value</a></li>
          
            <li><a href="#assert-valueContains">valueContains</a></li>
          
            <li><a href="#assert-visible">visible</a></li>
          
          </ul>
        </li>

        <li>
          <a href="#page-api">Page</a>
          <ul class="nav">
            <li><a href="#page-object-instance">instance</a></li>
            <li><a href="#page-commands">commands</a></li>
          </ul>
        </li>

        <li>
          <a href="#protocol">Commands/Protocol</a>
          <ul class="nav">
            <li>
              <h5><a href="#elements-headline">Finding Elements</a></h5>
            </li>
            <li><a href="#waitForElementVisible">waitForElementVisible</a></li>
            <li><a href="#waitForElementNotVisible">waitForElementNotVisible</a></li>
            <li><a href="#waitForElementPresent">waitForElementPresent</a></li>
            <li><a href="#waitForElementNotPresent">waitForElementNotPresent</a></li>
            <li><a href="#element">element</a></li>
            <li><a href="#elements">elements</a></li>
            <li><a href="#elementIdEquals">elementIdEquals</a></li>
            <li><a href="#elementIdElement">elementIdElement</a></li>
            <li><a href="#elementIdElements">elementIdElements</a></li>


            <li>
              <h5><a href="#elementinteraction-headline">Element Interaction</a></h5>
            </li>

            <li><a href="#click">click</a></li>
            <li><a href="#clearValue">clearValue</a></li>
            <li><a href="#moveToElement">moveToElement</a></li>
            <li><a href="#setValue">setValue</a></li>
            <li><a href="#submitForm">submitForm</a></li>
            <li><a href="#elementIdClear">elementIdClear</a></li>
            <li><a href="#elementIdClick">elementIdClick</a></li>
            <li><a href="#elementIdValue">elementIdValue</a></li>
            <li><a href="#keys">keys</a></li>
            <li><a href="#submit">submit</a></li>

            <li>
              <h5><a href="#elementstate-headline">Element State</a></h5>
            </li>

            <li><a href="#getAttribute">getAttribute</a></li>
            <li><a href="#getCssProperty">getCssProperty</a></li>
            <li><a href="#getElementSize">getElementSize</a></li>
            <li><a href="#getTagName">getTagName</a></li>
            <li><a href="#getText">getText</a></li>
            <li><a href="#getValue">getValue</a></li>
            <li><a href="#isVisible">isVisible</a></li>
            <li><a href="#elementActive">elementActive</a></li>
            <li><a href="#elementIdAttribute">elementIdAttribute</a></li>
            <li><a href="#elementIdCssProperty">elementIdCssProperty</a></li>
            <li><a href="#elementIdDisplayed">elementIdDisplayed</a></li>
            <li><a href="#elementIdEnabled">elementIdEnabled</a></li>
            <li><a href="#elementIdName">elementIdName</a></li>
            <li><a href="#elementIdSelected">elementIdSelected</a></li>
            <li><a href="#elementIdSize">elementIdSize</a></li>
            <li><a href="#elementIdText">elementIdText</a></li>

            <li>
              <h5><a href="#elementlocation-headline">Element Location</a></h5>
            </li>

            <li><a href="#getLocation">getLocation</a></li>
            <li><a href="#getLocationInView">getLocationInView</a></li>
            <li><a href="#elementIdLocationInView">elementIdLocationInView</a></li>
            <li><a href="#elementIdLocation">elementIdLocation</a></li>

            <li>
              <h5><a href="#document-headline">Document Handling</a></h5>
            </li>
            <li><a href="#injectScript">injectScript</a></li>
            <li><a href="#source">source</a></li>
            <li><a href="#execute">execute</a></li>
            <li><a href="#executeAsync">executeAsync</a></li>

            <li>
              <h5><a href="#sessions-headline">Session Related</a></h5>
            </li>
            <li><a href="#getLogTypes">getLogTypes</a></li>
            <li><a href="#getLog">getLog</a></li>
            <li><a href="#isLogAvailable">isLogAvailable</a></li>
            <li><a href="#end">end</a></li>
            <li><a href="#session">session</a></li>
            <li><a href="#sessions">sessions</a></li>
            <li><a href="#timeouts">timeouts</a></li>
            <li><a href="#timeoutsAsyncScript">timeoutsAsyncScript</a></li>
            <li><a href="#timeoutsImplicitWait">timeoutsImplicitWait</a></li>
            <li><a href="#status">status</a></li>
            <li><a href="#sessionLog">sessionLog</a></li>
            <li><a href="#sessionLogTypes">sessionLogTypes</a></li>

            <li>
              <h5><a href="#navigation-headline">Navigation</a></h5>
            </li>

            <li><a href="#getTitle">getTitle</a></li>
            <li><a href="#init">init</a></li>
            <li><a href="#urlHash">urlHash</a></li>
            <li><a href="#url">url</a></li>
            <li><a href="#back">back</a></li>
            <li><a href="#forward">forward</a></li>
            <li><a href="#refresh">refresh</a></li>
            <li><a href="#title">title</a></li>

            <li>
              <h5><a href="#contexts-headline">Window Related</a></h5>
            </li>

            <li><a href="#switchWindow">switchWindow</a></li>
            <li><a href="#resizeWindow">resizeWindow</a></li>
            <li><a href="#setWindowPosition">setWindowPosition</a></li>
            <li><a href="#maximizeWindow">maximizeWindow</a></li>
            <li><a href="#closeWindow">closeWindow</a></li>
            <li><a href="#window">window</a></li>
            <li><a href="#windowHandle">windowHandle</a></li>
            <li><a href="#windowHandles">windowHandles</a></li>
            <li><a href="#windowMaximize">windowMaximize</a></li>
            <li><a href="#windowPosition">windowPosition</a></li>
            <li><a href="#windowSize">windowSize</a></li>
            <li><a href="#frame">frame</a></li>
            <li><a href="#frameParent">frameParent</a></li>

            <li>
              <h5><a href="#cookies-headline">Cookies</a></h5>
            </li>
            <li><a href="#getCookies">getCookies</a></li>
            <li><a href="#getCookie">getCookie</a></li>
            <li><a href="#setCookie">setCookie</a></li>
            <li><a href="#deleteCookie">deleteCookie</a></li>
            <li><a href="#deleteCookies">deleteCookies</a></li>
            <li><a href="#cookie">cookie</a></li>

            <li>
              <h5><a href="#useractions-headline">User Actions</a></h5>
            </li>

            <li><a href="#doubleClick">doubleClick</a></li>
            <li><a href="#mouseButtonClick">mouseButtonClick</a></li>
            <li><a href="#mouseButtonDown">mouseButtonDown</a></li>
            <li><a href="#mouseButtonUp">mouseButtonUp</a></li>
            <li><a href="#moveTo">moveTo</a></li>

            <li>
              <h5><a href="#userprompts-headline">User Prompts</a></h5>
            </li>
            <li><a href="#acceptAlert">acceptAlert</a></li>
            <li><a href="#dismissAlert">dismissAlert</a></li>
            <li><a href="#getAlertText">getAlertText</a></li>
            <li><a href="#setAlertText">setAlertText</a></li>

            <li>
              <h5><a href="#screens-headline">Screen Capture</a></h5>
            </li>
            <li><a href="#saveScreenshot">saveScreenshot</a></li>
            <li><a href="#screenshot">screenshot</a></li>

            <li>
              <h5><a href="#mobile-headline">Mobile Related</a></h5>
            </li>

            <li><a href="#getOrientation">getOrientation</a></li>
            <li><a href="#setOrientation">setOrientation</a></li>
            <li><a href="#contexts">contexts</a></li>
            <li><a href="#currentContext">currentContext</a></li>
            <li><a href="#setContext">setContext</a></li>

            <li>
              <h5><a href="#utilities-headline">Utilities/Debugging</a></h5>
            </li>

            <li><a href="#pause">pause</a></li>
            <li><a href="#useCss">useCss</a></li>
            <li><a href="#useXpath">useXpath</a></li>
            <li><a href="#perform">perform</a></li>

          </ul>
        </li>
      </ul>
    </div>
  </div>

<div class="col-md-9" role="main">
  <div class="docs-section">
    <div class="migrating-guide"><a target="_blank" href="https://github.com/nightwatchjs/nightwatch/wiki/Migrating-to-Nightwatch-1.0">Migrating from v0.9?</a></div>
    <div class="page-header">
      <h2 id="expect-api">Expect</h2>
    </div>
    <br>
    <p>Nightwatch provides a fluent BDD-style interface for performing assertions on elements, defined on the <code>expect</code> namespace on the main Nightwatch instance. It is based on the <a href="http://chaijs.com/api/bdd/" target="_blank">Chai Expect</a> assertion library and provides a greater level of flexibility, also adding new capabilities over the classic <code>assert</code> interface.</p>
    <p>It uses a chain-able language to construct assertions given an element specified by a css/xpath selector. A simple example looks like the following:</p>

    <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  // start with identifying the element
  // and then assert the element is present
  browser.expect.element('#main').to.be.present;

  // or assert the element is visible
  browser.expect.element('#main').to.be.visible;
};</code></pre>
    </div>


    <div class="apimethod">
      <h3 id="expect-chains"><code>Language Chains</code></h3>
      <p>The following are provided as chainable getters to improve the readability of your assertions. They do not provide testing capabilities and the order is not important.</p>
      <ul>
        <li>to</li>
        <li>be</li>
        <li>been</li>
        <li>is</li>
        <li>that</li>
        <li>which</li>
        <li>and</li>
        <li>has</li>
        <li>have</li>
        <li>with</li>
        <li>at</li>
        <li>does</li>
        <li>of</li>
      </ul>
    </div>

    <div class="apimethod">
      <h3 id="expect-matchers"><code>.equal(value)/.contain(value)/.match(regex)</code></h3>
      <p>These methods will perform assertions on the specified target on the current element. The targets can be an attribute value, the element's inner text and a css property.</p>
      <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.equal('The Night Watch');

  browser.expect.element('#main').text.to.contain('The Night Watch');

  browser.expect.element('#main').to.have.css('display').which.equals('block');
};</code></pre>
      </div>
    </div>

    <div class="apimethod">
      <h3 id="expect-startend"><code>.startsWith(value)/.endsWith(value)</code></h3>
      <p>Same as `equal`/`contain`/`match`.</p>
      <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.endWith('Watch');

  browser.expect.element('#main').text.to.startWith('The');
};</code></pre>
      </div>


    </div>

    <div class="apimethod">
      <h3 id="expect-negation"><code>.not</code></h3>
      <p>Negates any of assertions following in the chain.</p>
      <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.not.equal('The Night Watch');

  browser.expect.element('#main').text.to.not.contain('The Night Watch');

  browser.expect.element('#main').to.have.css('display').which.does.not.equal('block');
};</code></pre>
      </div>

    </div>

    <div class="apimethod">
      <h3 id="expect-before"><code>.before(ms)/.after(ms)</code></h3>
      <p>These methods perform the same thing which is essentially retrying the assertion for the given amount of time (in milliseconds). <code>before</code> or <code>after</code> can be chained to any assertion and thus adding retry capability.</p>

        <p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) as a global property in your <code>nightwatch.json</code> or in your external globals file.
        Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).
      </p>
      <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element('#main').text.to.contain('The Night Watch').before(1000);

  browser.expect.element('#main').text.to.not.contain('The Night Watch').after(500);
};</code></pre>
      </div>

    </div>
    <!-- ============================================================
    // Expect
    ============================================================ -->

    <div class="commands">
      
      <div class="apimethod">
        <h3 id="expect-a"><code>.a(type)</code></h3>

        <p>Checks if the type (i.e. tag name) of a specified element is of an expected value.</p>

        
        <h5>Parameters:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>type</code></td>
              <td>string</td>
              <td><p>The expected type</p></td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td><p>Optional log message to display in the output. If missing, one is displayed by default.</p></td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#q&#39;).to.be.an(&#39;input&#39;);
  browser.expect.element(&#39;#q&#39;).to.be.an(&#39;input&#39;, &#39;Testing if #q is an input&#39;);
  browser.expect.element(&#39;#w&#39;).to.be.a(&#39;span&#39;);
}</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-active"><code>.active</code></h3>

        <p>Property that checks if an element is active in the DOM.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).to.be.active;
  browser.expect.element(&#39;#main&#39;).to.not.be.active;
  browser.expect.element(&#39;#main&#39;).to.be.active.before(100);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-attribute"><code>.attribute(name)</code></h3>

        <p>Checks if a given attribute of an element exists and optionally if it has the expected value.</p>

        
        <h5>Parameters:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>attribute</code></td>
              <td>string</td>
              <td><p>The attribute name</p></td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td><p>Optional log message to display in the output. If missing, one is displayed by default.</p></td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;body&#39;).to.have.attribute(&#39;data-attr&#39;);
  browser.expect.element(&#39;body&#39;).to.not.have.attribute(&#39;data-attr&#39;);
  browser.expect.element(&#39;body&#39;).to.not.have.attribute(&#39;data-attr&#39;, &#39;Testing if body does not have data-attr&#39;);
  browser.expect.element(&#39;body&#39;).to.have.attribute(&#39;data-attr&#39;).before(100);
  browser.expect.element(&#39;body&#39;).to.have.attribute(&#39;data-attr&#39;)
    .equals(&#39;some attribute&#39;);
  browser.expect.element(&#39;body&#39;).to.have.attribute(&#39;data-attr&#39;)
    .not.equals(&#39;other attribute&#39;);
  browser.expect.element(&#39;body&#39;).to.have.attribute(&#39;data-attr&#39;)
    .which.contains(&#39;something&#39;);
  browser.expect.element(&#39;body&#39;).to.have.attribute(&#39;data-attr&#39;)
    .which.matches(/^something\ else/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-count"><code>.elements(&lt;element&gt;).count</code></h3>

        <p>Checks if the type (i.e. tag name) of a specified element is of an expected value.</p>

        
        <h5>Parameters:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>type</code></td>
              <td>string</td>
              <td><p>The expected type</p></td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td><p>Optional log message to display in the output. If missing, one is displayed by default.</p></td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.elements(&#39;div&#39;).count.to.equal(10);
  browser.expect.elements(&#39;p&#39;).count.to.not.equal(1);
}</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-css"><code>.css(property)</code></h3>

        <p>Checks a given css property of an element exists and optionally if it has the expected value.</p>

        
        <h5>Parameters:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>property</code></td>
              <td>string</td>
              <td><p>The css property name</p></td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td><p>Optional log message to display in the output. If missing, one is displayed by default.*</p></td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).to.have.css(&#39;display&#39;);
  browser.expect.element(&#39;#main&#39;).to.have.css(&#39;display&#39;, &#39;Testing for display&#39;);
  browser.expect.element(&#39;#main&#39;).to.not.have.css(&#39;display&#39;);
  browser.expect.element(&#39;#main&#39;).to.have.css(&#39;display&#39;).before(100);
  browser.expect.element(&#39;#main&#39;).to.have.css(&#39;display&#39;).which.equals(&#39;block&#39;);
  browser.expect.element(&#39;#main&#39;).to.have.css(&#39;display&#39;).which.contains(&#39;some value&#39;);
  browser.expect.element(&#39;#main&#39;).to.have.css(&#39;display&#39;).which.matches(/some\ value/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-enabled"><code>.enabled</code></h3>

        <p>Property that checks if an element is currently enabled.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#weblogin&#39;).to.be.enabled;
  browser.expect.element(&#39;#main&#39;).to.not.be.enabled;
  browser.expect.element(&#39;#main&#39;).to.be.enabled.before(100);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-height"><code>.height</code></h3>

        <p>Property that retrieves the height contained by an element. Can be chained to check if contains/equals/matches the specified height or regex.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).height.to.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).height.to.not.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).height.to.equal(&#39;The Night Watch&#39;).before(100);
  browser.expect.element(&#39;#main&#39;).height.to.contain(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).height.to.match(/The\ Night\ Watch/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-present"><code>.present</code></h3>

        <p>Property that checks if an element is present in the DOM.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).to.be.present;
  browser.expect.element(&#39;#main&#39;).to.not.be.present;
  browser.expect.element(&#39;#main&#39;).to.be.present.before(100);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-selected"><code>.selected</code></h3>

        <p>Property that checks if an OPTION element, or an INPUT element of type checkbox or radio button is currently selected.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).to.be.selected;
  browser.expect.element(&#39;#main&#39;).to.not.be.selected;
  browser.expect.element(&#39;#main&#39;).to.be.selected.before(100);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-text"><code>.text</code></h3>

        <p>Property that retrieves the text contained by an element. Can be chained to check if contains/equals/matches the specified text or regex.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).text.to.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).text.to.not.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).text.to.equal(&#39;The Night Watch&#39;).before(100);
  browser.expect.element(&#39;#main&#39;).text.to.contain(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).text.to.match(/The\ Night\ Watch/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-value"><code>.value</code></h3>

        <p>Property that retrieves the value (i.e. the value attributed) of an element. Can be chained to check if contains/equals/matches the specified text or regex.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#q&#39;).to.have.value.that.equals(&#39;search&#39;);
  browser.expect.element(&#39;#q&#39;).to.have.value.not.equals(&#39;search&#39;);
  browser.expect.element(&#39;#q&#39;).to.have.value.which.contains(&#39;search&#39;);
  browser.expect.element(&#39;#q&#39;).to.have.value.which.matches(/search/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-value"><code>.a(type)</code></h3>

        <p>Checks if the content of the title element is of an expected value.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.cookie(&#39;cookie-name&#39;).to.contain(&#39;cookie-value&#39;);
  browser.expect.cookie(&#39;cookie-name&#39;, &#39;cookie-domain&#39;).to.contain(&#39;cookie-value&#39;);
  browser.expect.cookie(&#39;cookie-name&#39;).to.match(&#39;value&#39;);
}</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-value"><code>.a(type)</code></h3>

        <p>Checks if the content of the title element is of an expected value.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.title().to.contain(&#39;value&#39;);
  browser.expect.title().to.match(&#39;value&#39;);
}</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-value"><code>.a(type)</code></h3>

        <p>Checks if the type (i.e. tag name) of a specified element is of an expected value.</p>

        
        <h5>Parameters:</h5>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            
            <tr>
              <td><code>type</code></td>
              <td>string</td>
              <td><p>The expected type</p></td>
            </tr>
            
            <tr>
              <td><code>message</code><br><span class="optional">Optional</span></td>
              <td>string</td>
              <td><p>Optional log message to display in the output. If missing, one is displayed by default.</p></td>
            </tr>
            
            </tbody>
          </table>
        </div>
        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#q&#39;).to.be.an(&#39;input&#39;);
  browser.expect.element(&#39;#q&#39;).to.be.an(&#39;input&#39;, &#39;Testing if #q is an input&#39;);
  browser.expect.element(&#39;#w&#39;).to.be.a(&#39;span&#39;);
}</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-visible"><code>.visible</code></h3>

        <p>Property that asserts the visibility of a specified element.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).to.be.visible;
  browser.expect.element(&#39;#main&#39;).to.not.be.visible;
  browser.expect.element(&#39;#main&#39;).to.be.visible.before(100);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-width"><code>.width</code></h3>

        <p>Property that retrieves the width contained by an element. Can be chained to check if contains/equals/matches the specified width or regex.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).width.to.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.not.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.equal(&#39;The Night Watch&#39;).before(100);
  browser.expect.element(&#39;#main&#39;).width.to.contain(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.match(/The\ Night\ Watch/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-width"><code>.width</code></h3>

        <p>Property that retrieves the width contained by an element. Can be chained to check if contains/equals/matches the specified width or regex.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).width.to.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.not.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.equal(&#39;The Night Watch&#39;).before(100);
  browser.expect.element(&#39;#main&#39;).width.to.contain(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.match(/The\ Night\ Watch/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
      <div class="apimethod">
        <h3 id="expect-width"><code>.width</code></h3>

        <p>Property that retrieves the width contained by an element. Can be chained to check if contains/equals/matches the specified width or regex.</p>

        


        
        <h5>Usage:</h5>
        <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.expect.element(&#39;#main&#39;).width.to.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.not.equal(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.equal(&#39;The Night Watch&#39;).before(100);
  browser.expect.element(&#39;#main&#39;).width.to.contain(&#39;The Night Watch&#39;);
  browser.expect.element(&#39;#main&#39;).width.to.match(/The\ Night\ Watch/);
};</code></pre>
        </div>
        
      </div>  <!-- end .apimethod -->
      
    </div>
    <!-- ============================================================
    // END Expect
    ============================================================ -->

  </div>

  <div class="docs-section">
    <div class="page-header">
      <h2 id="assertions">Assert</h2>
    </div>
    <br>
    <p>The classic <code>assert</code>/<code>verify</code> library is still available on the Nightwatch instance as two objects containing the same methods to perform assertions on elements:
      <ul>
        <li><code>.assert</code> - when an assertion fails, the test ends, skipping all other assertions.</li>
        <li><code>.verify</code> - when an assertion fails, the test logs the failure and continues with other assertions.</li>
      </ul>
    </p>
<p>This will end the test:<br>
  <pre style="padding-top: 10px"><code class="language-javascript">client.assert.visible('.non_existing');</code></pre>
</p><p>
  But this will just log the failure and continue:<br>
  <pre style="padding-top: 10px"><code class="language-javascript">client.verify.visible(".non_existing");</code></pre>
</p>
<h4>Node.js Assert Module</h4>
<p>
  Nightwatch.js extends <a href="http://nodejs.org/api/assert.html" target="_blank">Node.js assert module</a>,
  so you can also use any of the available methods there in your tests.
</p>

<h4>Automatically retrying failed assertions</h4>
<p>
  You can tell Nightwatch to automatically retry failed assertions until a given timeout is reached, before the test runner gives up and fails the test.
  This can be accomplished by setting the property <code>retryAssertionTimeout</code> (in milliseconds) in the <code>globals</code> file.

  <br><br>
  For example: <code>retryAssertionTimeout = 2000</code>
</p>
  <!-- ============================================================
  // Assertions
  ============================================================ -->
  <div class="assertions">
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-attributeContains"></a>
  <h3 id="assert-attributeContains"><code>.attributeContains()</code></h3>
  <p>Checks if the given attribute of an element contains the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>selector</code></td>
         <td>string</td>
         <td>The selector (CSS / Xpath) used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>attribute</code></td>
         <td>string</td>
         <td>The attribute name</td>
       </tr>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected contained value of the attribute to check.</td>
       </tr>
       
       <tr>
         <td><code>message</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.attributeContains(&#39;#someElement&#39;, &#39;href&#39;, &#39;google.com&#39;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-attributeEquals"></a>
  <h3 id="assert-attributeEquals"><code>.attributeEquals()</code></h3>
  <p>Checks if the given attribute of an element has the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>attribute</code></td>
         <td>string</td>
         <td>The attribute name</td>
       </tr>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected value of the attribute to check.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.attributeEquals(&quot;body&quot;, &quot;data-attr&quot;, &quot;some value&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-containsText"></a>
  <h3 id="assert-containsText"><code>.containsText()</code></h3>
  <p>Checks if the given element contains the specified text.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The text to look for.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.containsText(&quot;#main&quot;, &quot;The Night Watch&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-cssClassPresent"></a>
  <h3 id="assert-cssClassPresent"><code>.cssClassPresent()</code></h3>
  <p>Checks if the given element has the specified CSS class.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>className</code></td>
         <td>string</td>
         <td>The CSS class to look for.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.cssClassPresent(&quot;#main&quot;, &quot;container&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-cssClassNotPresent"></a>
  <h3 id="assert-cssClassNotPresent"><code>.cssClassNotPresent()</code></h3>
  <p>Checks if the given element does not have the specified CSS class.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>className</code></td>
         <td>string</td>
         <td>The CSS class to look for.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.cssClassNotPresent(&quot;#main&quot;, &quot;container&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-cssProperty"></a>
  <h3 id="assert-cssProperty"><code>.cssProperty()</code></h3>
  <p>Checks if the specified css property of a given element has the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>cssProperty</code></td>
         <td>string</td>
         <td>The CSS property.</td>
       </tr>
       
       <tr>
         <td><code>expected</code></td>
         <td>string|number</td>
         <td>The expected value of the css property to check.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.cssProperty(&quot;#main&quot;, &quot;display&quot;, &quot;block&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-elementPresent"></a>
  <h3 id="assert-elementPresent"><code>.elementPresent()</code></h3>
  <p>Checks if the given element exists in the DOM.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.elementPresent(&quot;#main&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-elementNotPresent"></a>
  <h3 id="assert-elementNotPresent"><code>.elementNotPresent()</code></h3>
  <p>Checks if the given element does not exist in the DOM.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.elementNotPresent(&quot;.should_not_exist&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-hidden"></a>
  <h3 id="assert-hidden"><code>.hidden()</code></h3>
  <p>Checks if the given element is not visible on the page.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.hidden(&quot;.should_not_be_visible&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-title"></a>
  <h3 id="assert-title"><code>.title()</code></h3>
  <p>Checks if the page title equals the given value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected page title.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.title(&quot;Nightwatch.js&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-urlContains"></a>
  <h3 id="assert-urlContains"><code>.urlContains()</code></h3>
  <p>Checks if the current URL contains the given value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The value expected to exist within the current URL.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.urlContains(&#39;google&#39;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-urlEquals"></a>
  <h3 id="assert-urlEquals"><code>.urlEquals()</code></h3>
  <p>Checks if the current url equals the given value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>expected</code></td>
         <td>string</td>
         <td>The expected url.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.urlEquals(&#39;http://www.google.com&#39;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-value"></a>
  <h3 id="assert-value"><code>.value()</code></h3>
  <p>Checks if the given form element's value equals the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The expected text.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.value(&quot;form.login input[type=text]&quot;, &quot;username&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-valueContains"></a>
  <h3 id="assert-valueContains"><code>.valueContains()</code></h3>
  <p>Checks if the given form element's value contains the expected value.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>expectedText</code></td>
         <td>string</td>
         <td>The expected text.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.valueContains(&quot;form.login input[type=text]&quot;, &quot;username&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
    
    <!-- -->
    <div class="apimethod">
  <a name="assert-visible"></a>
  <h3 id="assert-visible"><code>.visible()</code></h3>
  <p>Checks if the given element is visible on the page.</p>

  <h5>Parameters:</h5>
  <div class="table-responsive">
    <table class="table table-bordered table-striped">
      <thead>
       <tr>
         <th style="width: 100px;">Name</th>
         <th style="width: 100px;">Type</th>
         <th>description</th>
       </tr>
      </thead>
      <tbody>
       
       <tr>
         <td><code>cssSelector</code></td>
         <td>string</td>
         <td>The CSS selector used to locate the element.</td>
       </tr>
       
       <tr>
         <td><code>msg</code><br><span class="optional">Optional</span></td>
         <td>string</td>
         <td>Optional log message to display in the output. If missing, one is displayed by default.</td>
       </tr>
       
      </tbody>
    </table>
  </div>

  <h5>Usage:</h5>
  <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.assert.visible(&quot;.should_be_visible&quot;);

};</code></pre>
    </div>
  </div> <!-- end .apimethod -->
  
  </div>
  <!-- ============================================================
  // END Assertions
  ============================================================ -->
  </div>

  <!-- ============================================================
    // Page
    ============================================================ -->

  <div class="docs-section">
    <div class="page-header">
      <h2 id="page-api">Page Object API</h2>
    </div>
    <br>
    <p>
      Page objects provide an additional layer of abstraction for test case creation. Page objects are defined in modules and parsed into factory functions that create page object instances. These factories are accessible through the <code>page</code> reference within the command API (accessible through the <code>browser</code> object) using the name of the module that defines them.
    </p>

    <h5>Example:</h5>
    <div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
  // can be string or function
  url: function () {
    return this.api.launchUrl;
  },

  elements: {
    // shorthand, specifies selector
    mySubmitButton: 'input[type=submit]'

    // full
    myTextInput: {
      selector: 'input[type=text]',
      locateStrategy: 'css selector'
    }
  },

  commands: [
    {
      myCustomPause: function () {
        this.api.pause(this.props.myPauseTime);
      }
    }
  ],

  // object version (best considered immutable)
  props: {
    myPauseTime: 1000
  },

  sections: {

    myFooterSection: {

      selector: '#my-footer',
      locateStrategy: 'css selector',

      elements: {
        myLogo: {
          selector: '.my-logo',
          locateStrategy: 'css selector'
        }
      },

      commands: [
        {
          myMoveToLogo: function () {
            this.moveToElement('@myLogo', this.props.myLogoX, this.props.myLogoY);
          }
        }
      ],

      // function version (recommended)
      props: function () {
        return {
          myLogoX: 10,
          myLogoY: 10
        };
      },

      sections: {
        // additional, nested sections
      }
    }
  }
};</code></pre>
    </div>

    <div class="assertions">
      <div class="apimethod">

        <h3>Page Object Module</h3>
        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            <tr>
              <td><code>commands</code></td>
              <td><code>Array</code></td>
              <td>A list of objects containing functions to represent methods added to the page object instance.</td>
            </tr>
            <tr>
              <td><code>elements</code></td>
              <td><code>Object</code>|<code>Array</code></td>
              <td>An object, or array of objects, of named element definitions to be used as element selectors within element commands called from the page object.</td>
            </tr>
            <tr>
              <td><code>props</code></td>
              <td><code>Object</code>|<code>Function</code></td>
              <td>An object or a function returning an object representing a container for user variables. Props objects are copied directly into the props property of the page object instance.</td>
            </tr>
            <tr>
              <td><code>sections</code></td>
              <td><code>Object</code></td>
              <td>An object of named sections definitions defining the sections within the page object.</td>
            </tr>
            <tr>
              <td><code>url</code></td>
              <td><code>String</code>|<code>Function</code></td>
              <td>A url or function returning a url to be used in a <code>url()</code> command when the page's <code>navigate()</code> method is called.</td>
            </tr>

            </tbody>
          </table>
        </div>

        <h2 id="page-object-instance">Page Object Instance</h2>
        <p>Page object module definitions are used to define page object instances when their respective factory functions within the <code>page</code> reference of the standard command API is called.</p>
        <pre style="padding-top: 10px"><code class="language-javascript">const myPageObject = browser.page.MyPage(); // defined in MyPage.js module</code></pre>

        <p>Every time a factory function like MyPage above is called, a new instance of the page object is created.</p>

        <h3 id="page-properties">Properties</h3>

        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            <tr>
              <td><code>api</code></td>
              <td><code>Object</code></td>
              <td>A reference providing access to the full Nightwatch command API, usually known as <code>browser</code> in test cases. This is used to access those commands that are not part of the subset of commands within the page object API.</td>
            </tr>
            <tr>
              <td><code>elements</code></td>
              <td><code>Object</code></td>
              <td>A map of Element objects used by element selectors.</td>
            </tr>
            <tr>
              <td><code>name</code></td>
              <td><code>string</code></td>
              <td>The name of the page object as defined by its module name (not including the extension). This is the same name used to access the page object factory from the <code>page</code> reference in the command API.</td>
            </tr>
            <tr>
              <td><code>props</code></td>
              <td><code>Object</code></td>
              <td>A reference to props object assigned from the module definition. <br><br><strong>Note:</strong> this will be the same props object for all instances of the page object if defined as an object instance within the page object module. If you wish for each props object to be unique, define props in the module as a function that would return a new props object for each new page object instance.</td>
            </tr>
            <tr>
              <td><code>section</code></td>
              <td><code>Object</code></td>
              <td>A map of Sections objects defined for the page object. This will only contain sections within the page object module's root <code>sections</code> definition. Nested sections are accessible through their parent section's own <code>section</code> reference.</td>
            </tr>

            <tr>
              <td><code>url</code></td>
              <td><code>string</code>|<code>Function</code></td>
              <td>The url value from the page object module, either a string or a function depending on how it was defined there.</td>
            </tr>

            </tbody>
          </table>
        </div>

        <h3 id="page-methods">Methods</h3>

        <h3 id="page-navigate"><code>.navigate()</code></h3>
        <p>Navigates to the resolved url defined for the page object using the command API's <code>url()</code> command. This command is generally used in place of the command API's <code>url()</code> when working with page objects because the <code>url</code> member of the page object is the user-defined url string or function and not the call used to navigate to a url.</p>

        <h3>Element Instances</h3>

        <p>Element instances encapsulate the definition used to handle element selectors. Generally you won't need to access them directly, instead referring to them using their <code>@</code>-prefixed names for selector arguments, but they are available through a page object or section's <code>elements</code> property.</p>


        <h3>Section Instances</h3>

        <p>Page object section instances are accessed from the <code>section</code> property of a page object instance (note that this is the singular version of "section" whereas the plural version, "sections", was used in the module definition). Sections are created automatically through the page object factory and are available directly as properties from the <code>section</code> reference.</p>

        <pre style="padding-top: 10px"><code class="language-javascript">
const myPageObject = browser.page.MyPage();
const mySection = myPageObject.section.MySection; // from a `sections: {}` block in page object
        </code></pre>

        <h3 id="page-commands">Page Object Commands</h3>
        <p>All the Nightwatch command and assertions API is inherited by page objects. </p>

        <h3><code>Custom Commands</code></h3>
        <p></p>

        <div class="table-responsive">
          <table class="table table-bordered table-striped">
            <thead>
            <tr>
              <th style="width: 100px;">Name</th>
              <th style="width: 100px;">Type</th>
              <th>description</th>
            </tr>
            </thead>
            <tbody>

            <tr>
              <td><code>commands</code></td>
              <td>Array</td>
              <td>A list of objects containing functions to represent methods added to the page object instance.</td>
            </tr>

            </tbody>
          </table>
        </div>
        <p>Page object commands considerations:</p>
        <ul>
          <li>
            <strong>Access:</strong> Page object commands are defined within page object modules. They can be in the module root object within the commands list or within section definitions (also in a commands), but only exist for the definition they're within.<br><br>
            Page object commands in the module root commands are not available in child sections and section commands are not available in parent sections or the root page object.
          </li>
          <li><strong>Context:</strong> Page object command context (the value of this) is the page object (for sections its the section object). </li>
          <li><strong>Execution:</strong> Page object commands are not called from within the command queue. Code in a page object command is executed immediately when the function is called. </li>
          <li><strong>Chaining:</strong> Page object commands must return a value for chaining. This can be anything, but it's recommended you stick to <code>this</code> to allow your commands to be chained in the context of the page object instance. </li>
        </ul>

      </div> <!-- end .apimethod -->

    </div>
    <!-- ============================================================
    // END Page
    ============================================================ -->
  </div>

  <div class="docs-section">
    <div class="page-header">
      <h2 id="protocol">Commands</h2>
    </div>
    <p>Nightwatch provides the basic WebDriver protocol mappings and also various composite commands to ensure a more fluent and convenient syntax for writing tests.</p>
    <ul>
      <li>composite commands - such as <code>getValue</code> or <code>isVisible</code>, usually incorporate two or more WebDriver protocol commands</li>
      <li>protocol commands - are most of the times simple mappings to the <a href="https://www.w3.org/TR/webdriver/" target="_blank">W3C WebDriver</a> protocol or, in some cases, its predecessor - the <a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol" target="_blank">Selenium JsonWireProtocol</a> protocol.</li>
    </ul>

    <p>Some of them are basic commands (such as <code>url</code> and <code>execute</code>) and others are internal commands being used by Nightwatch commands and assertions.</p>

    <h3>The callback function</h3>
    <p>Each method below allows an <code>callback</code> argument to be passed as the last argument. The callback function will then be called after the command is completed
      with the main API (<code>browser</code>) as the context and the response object as argument.</p>
    <div class="sample-test"><pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {

  browser.click("#main ul li a.first", function(response) {
    this.assert.ok(browser === this, "Check if the context is right.");
    this.assert.ok(typeof response == "object", "We got a response object.");
  });

};</code></pre></div>

  <!-- ============================================================
    // Protocol commands
    ============================================================ -->
  <div class="protocolcommands">
  
  

  

  
    <h3 class="section" id="elements-headline">Finding Elements</h3>
    
      
        

        
        <p>The commands listed below allow lookup of individual elements and collections of elements. Element retrieval searches are performed using a provided selector, in usually a CSS selector or, less often, an Xpath selector.</p>
        
        <p>The convenience commands, such as <code>.waitForElementVisible()</code> can take a default locator strategy. More info on <a href="https://www.w3.org/TR/webdriver/#locator-strategies" target="_blank">locator strategy</a> can be found on the WebDriver page.</p>
        
        <p>Each element has an associated web element reference (a UUID) that uniquely identifies the element across all browsing contexts.</p>
        
      
    
  

  
  <div class="apimethod">
    <h3 id="waitForElementNotPresent"><a href="/api/waitForElementNotPresent.html"><code>.waitForElementNotPresent()</code></a></h3>

    <p>Opposite of <code>waitForElementPresent</code>. Waits a given time in milliseconds for an element to be not present (i.e. removed) in the page before performing any other commands or assertions.</p>
<p>If the element is still present after the specified amount of time, the test fails.</p>
<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>
<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The selector (CSS / Xpath) used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>time=waitForConditionTimeout</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The total number of milliseconds to wait before failing.</p></td>
         </tr>
         
         <tr>
           <td><code>poll=waitForConditionPollInterval</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p></td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure=abortOnAssertionFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td><p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.waitForElementNotPresent(&#39;#dialog&#39;, 1000);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="waitForElementVisible"><a href="/api/waitForElementVisible.html"><code>.waitForElementVisible()</code></a></h3>

    <p>Waits a given time in milliseconds for an element to be visible in the page before performing any other commands or assertions.</p>
<p>If the element fails to be present and visible in the specified amount of time, the test fails. You can change this by setting <code>abortOnFailure</code> to <code>false</code>.</p>
<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>
<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The selector (CSS / Xpath) used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>time=waitForConditionTimeout</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The total number of milliseconds to wait before failing.</p></td>
         </tr>
         
         <tr>
           <td><code>poll=waitForConditionPollInterval</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p></td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure=abortOnAssertionFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td><p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.waitForElementVisible(&#39;body&#39;, 1000);
  // continue if failed
  browser.waitForElementVisible(&#39;body&#39;, 1000, false);
  // with callback
  browser.waitForElementVisible(&#39;body&#39;, 1000, function() {
    // do something while we&#39;re here
  });
  // custom Spanish message
  browser.waitForElementVisible(&#39;body&#39;, 1000, &#39;elemento %s no era visible en %d ms&#39;);
  // many combinations possible - the message is always the last argument
  browser.waitForElementVisible(&#39;body&#39;, 1000, false, function() {}, &#39;elemento %s no era visible en %d ms&#39;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="waitForElementNotVisible"><a href="/api/waitForElementNotVisible.html"><code>.waitForElementNotVisible()</code></a></h3>

    <p>Opposite of <code>waitForElementVisible</code>. Waits a given time in milliseconds for an element to be not visible (i.e. hidden but existing) in the page before performing any other commands or assertions.</p>
<p>If the element fails to be hidden in the specified amount of time, the test fails.</p>
<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>
<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The selector (CSS / Xpath) used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>time=waitForConditionTimeout</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The total number of milliseconds to wait before failing.</p></td>
         </tr>
         
         <tr>
           <td><code>poll=waitForConditionPollInterval</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p></td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure=abortOnAssertionFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td><p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.waitForElementNotVisible(&#39;#dialog&#39;, 1000);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="waitForElementPresent"><a href="/api/waitForElementPresent.html"><code>.waitForElementPresent()</code></a></h3>

    <p>Waits a given time in milliseconds for an element to be present in the page before performing any other commands or assertions.</p>
<p>If the element fails to be present in the specified amount of time, the test fails. You can change this by setting <code>abortOnFailure</code> to <code>false</code>.</p>
<p>You can change the polling interval by defining a <code>waitForConditionPollInterval</code> property (in milliseconds) in as a global property in your <code>nightwatch.json</code> or in your external globals file.</p>
<p>Similarly, a default timeout can be specified as a global <code>waitForConditionTimeout</code> property (in milliseconds).</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The selector (CSS / Xpath) used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>time=waitForConditionTimeout</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The total number of milliseconds to wait before failing.</p></td>
         </tr>
         
         <tr>
           <td><code>poll=waitForConditionPollInterval</code><br><span class="optional">Optional</span></td>
           <td>number</td>
           <td><p>The number of milliseconds to wait between checks. You can use this only if you also specify the time parameter.</p></td>
         </tr>
         
         <tr>
           <td><code>abortOnFailure=abortOnAssertionFailure</code><br><span class="optional">Optional</span></td>
           <td>boolean</td>
           <td><p>By the default if the element is not found the test will fail. Set this to false if you wish for the test to continue even if the assertion fails. To set this globally you can define a property <code>abortOnAssertionFailure</code> in your globals.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
         <tr>
           <td><code>message</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>Optional message to be shown in the output; the message supports two placeholders: %s for current selector and %d for the time (e.g. Element %s was not in the page for %d ms).</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.waitForElementPresent(&#39;body&#39;, 1000);
  // continue if failed
  browser.waitForElementPresent(&#39;body&#39;, 1000, false);
  // with callback
  browser.waitForElementPresent(&#39;body&#39;, 1000, function() {
    // do something while we&#39;re here
  });
  // custom Spanish message
  browser.waitForElementPresent(&#39;body&#39;, 1000, &#39;elemento %s no era presente en %d ms&#39;);
  // many combinations possible - the message is always the last argument
  browser.waitForElementPresent(&#39;body&#39;, 1000, false, function() {}, &#39;elemento %s no era presente en %d ms&#39;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="element"><a href="/api/element.html"><code>.element()</code></a></h3>

    <p>Search for an element on the page, starting from the document root. The located element will be returned as a web element JSON object.<br />
First argument to be passed is the locator strategy, which is detailed on the <a href="https://www.w3.org/TR/webdriver/#locator-strategies">WebDriver docs</a>.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td><p>The locator strategy to use.</p></td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td><p>The search target.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
 &#39;demo Test&#39; : function(browser) {
    browser.element(&#39;css selector&#39;, &#39;body&#39;, function(result) {
      console.log(result.value)
    });
  }
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elements"><a href="/api/elements.html"><code>.elements()</code></a></h3>

    <p>Search for multiple elements on the page, starting from the document root. The located elements will be returned as web element JSON objects.<br />
First argument to be passed is the locator strategy, which is detailed on the <a href="https://www.w3.org/TR/webdriver/#locator-strategies">WebDriver docs</a>.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td><p>The locator strategy to use.</p></td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td><p>The search target.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function to be invoked with the result when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
 &#39;demo Test&#39; : function(browser) {
    browser.elements(&#39;css selector&#39;, &#39;ul li&#39;, function(result) {
      console.log(result.value)
    });
  }
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdEquals"><a href="/api/elementIdEquals.html"><code>.elementIdEquals()</code></a></h3>

    <p>Test if two element IDs refer to the same DOM element.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>otherId</code></td>
           <td>string</td>
           <td><p>The web element ID of the other element to compare against.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
 &#39;demo Test&#39; : function(browser) {
    browser.elementIdEquals(&#39;&lt;ID-1&gt;&#39;, &#39;&lt;ID-2&gt;&#39;, function(result) {
      console.log(result.value)
    });
  }
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdElement"><a href="/api/elementIdElement.html"><code>.elementIdElement()</code></a></h3>

    <p>Search for an element on the page, starting from the identified element. The located element will be returned as a web element JSON object.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td><p>The locator strategy to use.</p></td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td><p>The search target.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
 &#39;demo Test&#39; : function(browser) {
    browser.elementIdElement(&#39;&lt;ID&gt;&#39;, &#39;css selector&#39;, &#39;.new-element&#39;, function(result) {
      console.log(result.value)
    });
  }
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdElements"><a href="/api/elementIdElements.html"><code>.elementIdElements()</code></a></h3>

    <p>Search for multiple elements on the page, starting from the identified element. The located element will be returned as a web element JSON objects.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>using</code></td>
           <td>string</td>
           <td><p>The locator strategy to use.</p></td>
         </tr>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td><p>The search target.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
 &#39;demo Test&#39; : function(browser) {
    browser.elementIdElements(&#39;&lt;ID&gt;&#39;, &#39;css selector&#39;, &#39;ul li&#39;, function(result) {
      console.log(result.value)
    });
  }
}</code></pre>
</div>
  

  </div>
  
  

  
    <h3 class="section" id="elementinteraction-headline">Element Interaction</h3>
    
  

  
  <div class="apimethod">
    <h3 id="clearValue"><a href="/api/clearValue.html"><code>.clearValue()</code></a></h3>

    <p>Clear a textarea or a text input element's value. Uses <code>elementIdValue</code> protocol action internally.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.clearValue(&#39;input[type=text]&#39;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="click"><a href="/api/click.html"><code>.click()</code></a></h3>

    <p>Simulates a click event on the given DOM element. Uses <code>elementIdClick</code> protocol action internally.</p>
<p>The element is scrolled into view if it is not already pointer-interactable. See the WebDriver specification for <a href="https://www.w3.org/TR/webdriver/#element-interactability" target="_blank">element interactability</a></p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.click(&quot;#main ul li a.first&quot;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="submitForm"><a href="/api/submitForm.html"><code>.submitForm()</code></a></h3>

    <p>Submit a FORM element. The submit command may also be applied to any element that is a descendant of a FORM element. Uses <code>submit</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.submitForm(&#39;form.login&#39;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="setValue"><a href="/api/setValue.html"><code>.setValue()</code></a></h3>

    <p>Sends some text to an element. Can be used to set the value of a form element or to send a sequence of key strokes to an element. Any UTF-8 character may be specified.</p>
<div class="alert alert-warning"><strong>setValue</strong> does not clear the existing value of the element. To do so, use the <strong>clearValue()</strong> command.</div>
<p>An object map with available keys and their respective UTF-8 characters, as defined on <a href="http://www.w3.org/TR/webdriver/#character-types">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>browser.Keys</code>.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>inputValue</code></td>
           <td>string|array</td>
           <td><p>The text to send to the element or key strokes.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
// send some simple text to an input
this.demoTest = function (browser) {
  browser.setValue(&#39;input[type=text]&#39;, &#39;nightwatch&#39;);
};
//
// send some text to an input and hit enter.
this.demoTest = function (browser) {
  browser.setValue(&#39;input[type=text]&#39;, [&#39;nightwatch&#39;, browser.Keys.ENTER]);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdClear"><a href="/api/elementIdClear.html"><code>.elementIdClear()</code></a></h3>

    <p>Scrolls into view a submittable element excluding buttons or editable element, and then attempts to clear its value, reset the checked state, or text content.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdClick"><a href="/api/elementIdClick.html"><code>.elementIdClick()</code></a></h3>

    <p>Scrolls into view the element and clicks the in-view center point. If the element is not pointer-interactable, an <code>element not interactable</code> error is returned.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdValue"><a href="/api/elementIdValue.html"><code>.elementIdValue()</code></a></h3>

    <p>Scrolls into view the form control element and then sends the provided keys to the element, or returns the current value of the element. In case the element is not keyboard interactable, an <code>element not interactable error</code> is returned.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>value</code><br><span class="optional">Optional</span></td>
           <td>string|array|none</td>
           <td><p>Value to send to element in case of a POST</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="keys"><a href="/api/keys.html"><code>.keys()</code></a></h3>

    <p>Send a sequence of key strokes to the active element. The sequence is defined in the same format as the <code>sendKeys</code> command.<br />
An object map with available keys and their respective UTF-8 characters, as defined on <a href="http://www.w3.org/TR/webdriver/#character-types">W3C WebDriver draft spec</a>, is loaded onto the main Nightwatch instance as <code>client.Keys</code>.</p>
<p>Rather than the <code>setValue</code>, the modifiers are not released at the end of the call. The state of the modifier keys is kept between calls, so mouse interactions can be performed while modifier keys are depressed.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>keysToSend</code></td>
           <td>Array</td>
           <td><p>The keys sequence to be sent.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="submit"><a href="/api/submit.html"><code>.submit()</code></a></h3>

    <p>Submit a FORM element. The submit command may also be applied to any element that is a descendant of a FORM element.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  

  
    <h3 class="section" id="elementstate-headline">Element State</h3>
    
      
        <p>Details on how WebDriver checks if the element is displayed are available <a href="https://www.w3.org/TR/webdriver/#h-element-displayedness" target="_blank">Element Displayedness</a> page.</p>
      
    
  

  
  <div class="apimethod">
    <h3 id="getAttribute"><a href="/api/getAttribute.html"><code>.getAttribute()</code></a></h3>

    <p>Retrieve the value of an attribute for a given DOM element. Uses <code>elementIdAttribute</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>attribute</code></td>
           <td>string</td>
           <td><p>The attribute name to inspect.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The value of the attribute</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getAttribute(&quot;#main ul li a.first&quot;, &quot;href&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value, &quot;#home&quot;);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getElementSize"><a href="/api/getElementSize.html"><code>.getElementSize()</code></a></h3>

    <p>Determine an element's size in pixels. Uses <code>elementIdSize</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>{width: number, height: number}</td>
           <td> The width and height of the element in pixels</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getElementSize(&quot;#main ul li a.first&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value.width, 500);
    this.assert.equal(result.value.height, 20);
 });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getCssProperty"><a href="/api/getCssProperty.html"><code>.getCssProperty()</code></a></h3>

    <p>Retrieve the value of a css property for a given DOM element. Uses <code>elementIdCssProperty</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>cssProperty</code></td>
           <td>string</td>
           <td><p>The CSS property to inspect.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The value of the css property</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getCssProperty(&quot;#main ul li a.first&quot;, &quot;display&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value, &#39;inline&#39;);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getTagName"><a href="/api/getTagName.html"><code>.getTagName()</code></a></h3>

    <p>Query for an element's tag name. Uses <code>elementIdName</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>number</td>
           <td> The element's tag name, as a lowercase string.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getTagName(&quot;#main ul li .first&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value, &quot;a&quot;);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getText"><a href="/api/getText.html"><code>.getText()</code></a></h3>

    <p>Returns the visible text for the element. Uses <code>elementIdText</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The element's visible text.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getText(&quot;#main ul li a.first&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value, &quot;nightwatchjs.org&quot;);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="isVisible"><a href="/api/isVisible.html"><code>.isVisible()</code></a></h3>

    <p>Determine if an element is currently displayed. Uses <code>elementIdDisplayed</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.isVisible(&#39;#main&#39;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value, true);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getValue"><a href="/api/getValue.html"><code>.getValue()</code></a></h3>

    <p>Returns a form element current value. Uses <code>elementIdValue</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The element's value.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getValue(&quot;form.login input[type=text]&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value, &quot;enter username&quot;);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="isVisible"><a href="/api/isVisible.html"><code>.isVisible()</code></a></h3>

    <p>Determine if an element is currently displayed. Uses <code>elementIdDisplayed</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.isVisible(&#39;#main&#39;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value, true);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elementActive"><a href="/api/elementActive.html"><code>.elementActive()</code></a></h3>

    <p>Get the element on the page that currently has focus. The element will be returned as a web element JSON object.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
 &#39;demo Test&#39; : function(browser) {
    browser.elementActive(function(result) {
      console.log(result.value)
    });
  }
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdAttribute"><a href="/api/elementIdAttribute.html"><code>.elementIdAttribute()</code></a></h3>

    <p>Get the value of an element's attribute.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>attributeName</code></td>
           <td>string</td>
           <td><p>The attribute name</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdCssProperty"><a href="/api/elementIdCssProperty.html"><code>.elementIdCssProperty()</code></a></h3>

    <p>Retrieve the computed value of the given CSS property of the given element.</p>
<p>The CSS property to query should be specified using the CSS property name, not the JavaScript property name (e.g. background-color instead of backgroundColor).</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>cssPropertyName</code></td>
           <td>string</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdDisplayed"><a href="/api/elementIdDisplayed.html"><code>.elementIdDisplayed()</code></a></h3>

    <p>Determine if an element is currently displayed.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdEnabled"><a href="/api/elementIdEnabled.html"><code>.elementIdEnabled()</code></a></h3>

    <p>Determine if an element is currently enabled.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdName"><a href="/api/elementIdName.html"><code>.elementIdName()</code></a></h3>

    <p>Retrieve the qualified tag name of the given element.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdSelected"><a href="/api/elementIdSelected.html"><code>.elementIdSelected()</code></a></h3>

    <p>Determine if an OPTION element, or an INPUT element of type checkbox or radio button is currently selected.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdSize"><a href="/api/elementIdSize.html"><code>.elementIdSize()</code></a></h3>

    <p>Determine an element's size in pixels. The size will be returned as a JSON object with width and height properties.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdText"><a href="/api/elementIdText.html"><code>.elementIdText()</code></a></h3>

    <p>Returns the visible text for the element.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  

  
    <h3 class="section" id="elementlocation-headline">Element Location</h3>
    
  

  
  <div class="apimethod">
    <h3 id="getLocation"><a href="/api/getLocation.html"><code>.getLocation()</code></a></h3>

    <p>Determine an element's location on the page. The point (0, 0) refers to the upper-left corner of the page.</p>
<p>The element's coordinates are returned as a JSON object with x and y properties. Uses <code>elementIdLocation</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>{x:number, y:number}</td>
           <td> The X and Y coordinates for the element on the page.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getLocation(&quot;#main ul li a.first&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value.x, 200);
    this.assert.equal(result.value.y, 200);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getLocationInView"><a href="/api/getLocationInView.html"><code>.getLocationInView()</code></a></h3>

    <p>Determine an element's location on the screen once it has been scrolled into view. Uses <code>elementIdLocationInView</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>selector</code></td>
           <td>string</td>
           <td><p>The CSS/Xpath selector used to locate the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>{x: number, y: number}</td>
           <td> The X and Y coordinates for the element on the page.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.getLocationInView(&quot;#main ul li a.first&quot;, function(result) {
    this.assert.equal(typeof result, &quot;object&quot;);
    this.assert.equal(result.status, 0);
    this.assert.equal(result.value.x, 200);
    this.assert.equal(result.value.y, 200);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdLocationInView"><a href="/api/elementIdLocationInView.html"><code>.elementIdLocationInView()</code></a></h3>

    <p>Determine an element's location on the screen once it has been scrolled into view.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="elementIdLocation"><a href="/api/elementIdLocation.html"><code>.elementIdLocation()</code></a></h3>

    <p>Determine an element's location on the page. The point (0, 0) refers to the upper-left corner of the page.</p>
<p>The element's coordinates are returned as a JSON object with x and y properties.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID of the element to route the command to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>object</td>
           <td> The X and Y coordinates for the element on the page.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    

  </div>
  
  

  
    <h3 class="section" id="document-headline">Document Handling</h3>
    
  

  
  <div class="apimethod">
    <h3 id="injectScript"><a href="/api/injectScript.html"><code>.injectScript()</code></a></h3>

    <p>Utility command to load an external script into the page specified by url.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>scriptUrl</code></td>
           <td>string</td>
           <td><p>The script file url</p></td>
         </tr>
         
         <tr>
           <td><code>id</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>Dom element id to be set on the script tag.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>HTMLScriptElement</td>
           <td> The newly created script tag.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(client) {
  this.injectScript(&quot;{script-url}&quot;, function() {
    // we&#39;re all done here.
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="source"><a href="/api/source.html"><code>.source()</code></a></h3>

    <p>Returns a string serialisation of the DOM of the current page.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="execute"><a href="/api/execute.html"><code>.execute()</code></a></h3>

    <p>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. The executed script is assumed to be synchronous.<br />
The script argument defines the script to execute in the form of a function body. The value returned by that function will be returned to the client.</p>
<p>The function will be invoked with the provided args array and the values may be accessed via the arguments object in the order specified.</p>
<p>Under the hood, if the <code>body</code> param is a function it is converted to a string with <code>&lt;function&gt;.toString()</code>. Any references to your current scope are ignored.</p>
<p>To ensure cross-browser compatibility, the specified function should not be in ES6 format (i.e. <code>() =&gt; {}</code>). If the execution of the function fails, the first argument of the callback contains error information.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>body</code></td>
           <td>string|function</td>
           <td><p>The function body to be injected.</p></td>
         </tr>
         
         <tr>
           <td><code>args</code></td>
           <td>Array</td>
           <td><p>An array of arguments which will be passed to the function.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The script result.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.execute(function(imageData) {
     // resize operation
     return true;
   }, [imageData], function(result) {
     // result.value === true
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="executeAsync"><a href="/api/executeAsync.html"><code>.executeAsync()</code></a></h3>

    <p>Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame. The executed script is assumed to be asynchronous.</p>
<p>The function to be injected receives the <code>done</code> callback as argument which needs to be called when the asynchronous operation finishes. The value passed to the <code>done</code> callback is returned to the client.<br />
Additional arguments for the injected function may be passed as a non-empty array which will be passed before the <code>done</code> callback.</p>
<p>Asynchronous script commands may not span page loads. If an unload event is fired while waiting for the script result, an error will be returned.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>script</code></td>
           <td>string|function</td>
           <td><p>The function body to be injected.</p></td>
         </tr>
         
         <tr>
           <td><code>args</code></td>
           <td>Array</td>
           <td><p>An array of arguments which will be passed to the function.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>*</td>
           <td> The script result.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.executeAsync(function(done) {
     setTimeout(function() {
       done(true);
     }, 500);
   }, function(result) {
     // result.value === true
   });

   browser.executeAsync(function(arg1, arg2, done) {
     setTimeout(function() {
       done(true);
     }, 500);
   }, [arg1, arg2], function(result) {
     // result.value === true
   });
}</code></pre>
</div>
  

  </div>
  
  

  
    <h3 class="section" id="sessions-headline">Sessions</h3>
    
      
        <p>A WebDriver session represents the connection between a client and a remote WebDriver server. Read more on <a href="https://www.w3.org/TR/webdriver/#sessions" target="_blank">WebDriver page</a>.</p>
      
    
  

  
  <div class="apimethod">
    <h3 id="getLogTypes"><a href="/api/getLogTypes.html"><code>.getLogTypes()</code></a></h3>

    <p>Gets the available log types. More info about log types in WebDriver can be found here: https://github.com/SeleniumHQ/selenium/wiki/Logging</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array</td>
           <td> Available log types</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(client) {
  this.getLogTypes(function(typesArray) {
    console.log(typesArray);
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getLog"><a href="/api/getLog.html"><code>.getLog()</code></a></h3>

    <p>Gets a log from selenium.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>typeString</code></td>
           <td>string|function</td>
           <td><p>Log type to request</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(client) {
  this.getLog(&#39;browser&#39;, function(logEntriesArray) {
    console.log(&#39;Log length: &#39; + logEntriesArray.length);
    logEntriesArray.forEach(function(log) {
       console.log(&#39;[&#39; + log.level + &#39;] &#39; + log.timestamp + &#39; : &#39; + log.message);
     });
  });
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="isLogAvailable"><a href="/api/isLogAvailable.html"><code>.isLogAvailable()</code></a></h3>

    <p>Utility command to test if the log type is available.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>typeString</code></td>
           <td>string|function</td>
           <td><p>Type of log to test</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(browser) {
  browser.isLogAvailable(&#39;browser&#39;, function(isAvailable) {
    // do something more in here
  });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="end"><a href="/api/end.html"><code>.end()</code></a></h3>

    <p>Ends the session. Uses session protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.end();
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="session"><a href="/api/session.html"><code>.session()</code></a></h3>

    <p>Get info about, delete or create a new session. Defaults to the current session.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>action</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>The http verb to use, can be &quot;get&quot;, &quot;post&quot; or &quot;delete&quot;. If only the callback is passed, get is assumed by default.</p></td>
         </tr>
         
         <tr>
           <td><code>sessionId</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>The id of the session to get info about or delete.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
   browser.session(function(result) {
     console.log(result.value);
   });
   //
   browser.session(&#39;delete&#39;, function(result) {
     console.log(result.value);
   });
   //
   browser.session(&#39;delete&#39;, &#39;12345-abc&#39;, function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="sessions"><a href="/api/sessions.html"><code>.sessions()</code></a></h3>

    <p>Returns a list of the currently active sessions.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.sessions(function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="timeouts"><a href="/api/timeouts.html"><code>.timeouts()</code></a></h3>

    <p>Configure the amount of time that a particular type of operation can execute for before they are aborted and a |Timeout| error is returned to the client.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>type</code></td>
           <td>string</td>
           <td><p>The type of operation to set the timeout for. Valid values are &quot;script&quot; for script timeouts, &quot;implicit&quot; for modifying the implicit wait timeout and &quot;page load&quot; for setting a page load timeout.</p></td>
         </tr>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td><p>The amount of time, in milliseconds, that time-limited commands are permitted to run.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.timeouts(&#39;script&#39;, 10000, function(result) {
     console.log(result);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="timeoutsAsyncScript"><a href="/api/timeoutsAsyncScript.html"><code>.timeoutsAsyncScript()</code></a></h3>

    <p>Set the amount of time, in milliseconds, that asynchronous scripts executed by <code>.executeAsync</code> are permitted to run before they are aborted and a |Timeout| error is returned to the client.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td><p>The amount of time, in milliseconds, that time-limited commands are permitted to run.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.timeoutsAsyncScript(10000, function(result) {
     console.log(result);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="timeoutsImplicitWait"><a href="/api/timeoutsImplicitWait.html"><code>.timeoutsImplicitWait()</code></a></h3>

    <p>Set the amount of time the driver should wait when searching for elements. If this command is never sent, the driver will default to an implicit wait of 0ms.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td><p>The amount of time, in milliseconds, that time-limited commands are permitted to run.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.timeoutsImplicitWait(10000, function(result) {
     console.log(result);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="status"><a href="/api/status.html"><code>.status()</code></a></h3>

    <p>Query the server's current status.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="sessionLog"><a href="/api/sessionLog.html"><code>.sessionLog()</code></a></h3>

    <p>Gets the text of the log type specified. To find out the available log types, use <code>.getLogTypes()</code>.</p>
<p>Returns a <a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#log-entry-json-object">log entry JSON object</a>.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>typeString</code></td>
           <td>string</td>
           <td><p>Type of log to request. Can be one of: client, driver, browser, server</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array</td>
           <td> Array of the text entries of the log.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.sessionLog(&#39;client&#39;, function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="sessionLogTypes"><a href="/api/sessionLogTypes.html"><code>.sessionLogTypes()</code></a></h3>

    <p>Gets an array of strings for which log types are available. This methods returns the entire WebDriver response, if you are only interested in the logs array, use <code>.getLogTypes()</code> instead.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.sessionLogTypes(function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  

  
    <h3 class="section" id="navigation-headline">Navigation</h3>
    
      
        <p>The commands in this section allow navigation to new URLs and introspection of the currently loaded url.</p>
      
    
  

  
  <div class="apimethod">
    <h3 id="getTitle"><a href="/api/getTitle.html"><code>.getTitle()</code></a></h3>

    <p>Returns the title of the current page. Uses title protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The page title.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.getTitle(function(title) {
     this.assert.equal(typeof title, &#39;string&#39;);
     this.assert.equal(title, &#39;Nightwatch.js&#39;);
   });
 };</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="init"><a href="/api/init.html"><code>.init()</code></a></h3>

    <p>This command is an alias to url and also a convenience method when called without any arguments in the sense that it performs a call to .url() with passing the value of <code>launch_url</code> field from the settings file.<br />
Uses <code>url</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>url</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>Url to navigate to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (client) {
  client.init();
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="urlHash"><a href="/api/urlHash.html"><code>.urlHash()</code></a></h3>

    <p>Convenience method that adds the specified hash (i.e. url fragment) to the current value of the <code>launch_url</code> as set in <code>nightwatch.json</code>.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>hash</code></td>
           <td>string</td>
           <td><p>The hash to add/replace to the current url (i.e. the value set in the launch_url property in nightwatch.json).</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (client) {
  client.urlHash(&#39;#hashvalue&#39;);
  // or
  client.urlHash(&#39;hashvalue&#39;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="url"><a href="/api/url.html"><code>.url()</code></a></h3>

    <p>Retrieve the URL of the current page or navigate to a new URL.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>url</code><br><span class="optional">Optional</span></td>
           <td>string|function</td>
           <td><p>If missing, it will return the URL of the current page as an argument to the supplied callback.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>Function</td>
           <td></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
module.exports = {
 &#39;demo Test&#39; : function(browser) {
    browser.url(function(result) {
      // return the current url
      console.log(result);
    });
    //
    // navigate to new url:
    browser.url(&#39;{URL}&#39;);
    //
    //
    // navigate to new url:
    browser.url(&#39;{URL}&#39;, function(result) {
      console.log(result);
    });
  }
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="back"><a href="/api/back.html"><code>.back()</code></a></h3>

    <p>Navigate backwards in the browser history, if possible.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="forward"><a href="/api/forward.html"><code>.forward()</code></a></h3>

    <p>Navigate forwards in the browser history, if possible.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="refresh"><a href="/api/refresh.html"><code>.refresh()</code></a></h3>

    <p>Refresh the current page.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="title"><a href="/api/title.html"><code>.title()</code></a></h3>

    <p>Get the current page title.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.title(function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  

  
    <h3 class="section" id="contexts-headline">Window Related</h3>
    
  

  
  <div class="apimethod">
    <h3 id="switchWindow"><a href="/api/switchWindow.html"><code>.switchWindow()</code></a></h3>

    <p>Change focus to another window. The window to change focus to may be specified by its server assigned window handle, or by the value of its name attribute.</p>
<p>To find out the window handle use <code>windowHandles</code> command</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>handleOrName</code></td>
           <td>string</td>
           <td><p>The server assigned window handle or the name attribute.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.windowHandles(function(result) {
     var handle = result.value[0];
     browser.switchWindow(handle);
   });
 };</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="resizeWindow"><a href="/api/resizeWindow.html"><code>.resizeWindow()</code></a></h3>

    <p>Resizes the current window.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>width</code></td>
           <td>number</td>
           <td><p>The new window width.</p></td>
         </tr>
         
         <tr>
           <td><code>height</code></td>
           <td>number</td>
           <td><p>The new window height.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.resizeWindow(1000, 800);
 };</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="setWindowPosition"><a href="/api/setWindowPosition.html"><code>.setWindowPosition()</code></a></h3>

    <p>Sets the current window position.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>offsetX</code></td>
           <td>number</td>
           <td><p>The new window offset x-position.</p></td>
         </tr>
         
         <tr>
           <td><code>offsetY</code></td>
           <td>number</td>
           <td><p>The new window offset y-position.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.setWindowPosition(0, 0);
 };</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="maximizeWindow"><a href="/api/maximizeWindow.html"><code>.maximizeWindow()</code></a></h3>

    <p>Maximizes the current window.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.maximizeWindow();
 };</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="closeWindow"><a href="/api/closeWindow.html"><code>.closeWindow()</code></a></h3>

    <p>Close the current window. This can be useful when you're working with multiple windows open (e.g. an OAuth login).<br />
Uses <code>window</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (client) {
  client.closeWindow();
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="window"><a href="/api/window.html"><code>.window()</code></a></h3>

    <p>Change focus to another window or close the current window. Shouldn't normally be used directly, instead <code>.switchWindow()</code> and <code>.closeWindow()</code> should be used.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>method</code></td>
           <td>string</td>
           <td><p>The HTTP method to use. Can be either <code>POST</code> (change focus) or <code>DELETE</code> (close window).</p></td>
         </tr>
         
         <tr>
           <td><code>handleOrName</code></td>
           <td>string</td>
           <td><p>The window to change focus to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="windowHandle"><a href="/api/windowHandle.html"><code>.windowHandle()</code></a></h3>

    <p>Retrieve the current window handle.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.windowHandle(function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="windowHandles"><a href="/api/windowHandles.html"><code>.windowHandles()</code></a></h3>

    <p>Retrieve the list of all window handles available to the session.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.windowHandles(function(result) {
     // An array of window handles.
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="windowMaximize"><a href="/api/windowMaximize.html"><code>.windowMaximize()</code></a></h3>

    <p>Increases the window to the maximum available size without going full-screen.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>handleOrName</code><br><span class="optional">Optional</span></td>
           <td>string</td>
           <td><p>windowHandle URL parameter; if it is &quot;current&quot;, the currently active window will be maximized.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.windowMaximize(&#39;current&#39;, function(result) {
     console.log(result);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="windowPosition"><a href="/api/windowPosition.html"><code>.windowPosition()</code></a></h3>

    <p>Change or get the position of the specified window. If the second argument is a function it will be used as a callback and the call will perform a get request to retrieve the existing window position.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>windowHandle</code></td>
           <td>string</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>offsetX</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>offsetY</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {

   // Change the position of the specified window.
   // If the :windowHandle URL parameter is &quot;current&quot;, the currently active window will be moved.
   browser.windowPosition(&#39;current&#39;, 0, 0, function(result) {
     console.log(result);
   });

   // Get the position of the specified window.
   // If the :windowHandle URL parameter is &quot;current&quot;, the position of the currently active window will be returned.
   browser.windowPosition(&#39;current&#39;, function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="windowSize"><a href="/api/windowSize.html"><code>.windowSize()</code></a></h3>

    <p>Change or get the size of the specified window. If the second argument is a function it will be used as a callback and the call will perform a get request to retrieve the existing window size.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>windowHandle</code></td>
           <td>string</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>width</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>height</code></td>
           <td>number</td>
           <td></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {

   // Return the size of the specified window. If the :windowHandle URL parameter is &quot;current&quot;, the size of the currently active window will be returned.
   browser.windowSize(&#39;current&#39;, function(result) {
     console.log(result.value);
   });

   // Change the size of the specified window.
   // If the :windowHandle URL parameter is &quot;current&quot;, the currently active window will be resized.
   browser.windowSize(&#39;current&#39;, 300, 300, function(result) {
     console.log(result.value);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="frame"><a href="/api/frame.html"><code>.frame()</code></a></h3>

    <p>Change focus to another frame on the page. If the frame id is missing or null, the server should switch to the page's default content.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>frameId</code><br><span class="optional">Optional</span></td>
           <td>string|number</td>
           <td><p>Identifier for the frame to change focus to.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.frame(&#39;&lt;ID&gt;&#39;, function(result) {
     console.log(result);
   });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="frameParent"><a href="/api/frameParent.html"><code>.frameParent()</code></a></h3>

    <p>Change focus to the parent context. If the current context is the top level browsing context, the context remains unchanged.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.frameParent(function(result) {
     console.log(result);
   });
}</code></pre>
</div>
  

  </div>
  
  

  
    <h3 class="section" id="cookies-headline">Cookies</h3>
    
  

  
  <div class="apimethod">
    <h3 id="getCookies"><a href="/api/getCookies.html"><code>.getCookies()</code></a></h3>

    <p>Retrieve all cookies visible to the current page. The cookies are returned as an array of cookie JSON object, as defined <a href="https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object">here</a>.</p>
<p>Uses <code>cookie</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>The callback function which will receive the response as an argument.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array.&lt;object&gt;</td>
           <td> A list of cookies.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(browser) {
  browser.getCookies(function callback(result) {
    this.assert.equal(result.value.length, 1);
    this.assert.equals(result.value[0].name, &#39;test_cookie&#39;);
  });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="getCookie"><a href="/api/getCookie.html"><code>.getCookie()</code></a></h3>

    <p>Retrieve a single cookie visible to the current page. The cookie is returned as a cookie JSON object, as defined <a href="https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object">here</a>.</p>
<p>Uses <code>cookie</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>name</code></td>
           <td>string</td>
           <td><p>The cookie name.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>object|null</td>
           <td> The cookie object as a selenium cookie JSON object or null if the cookie wasn't found.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(browser) {
  browser.getCookie(name, function callback(result) {
    this.assert.equal(result.value, &#39;123456&#39;);
    this.assert.equals(result.name, &#39;test_cookie&#39;);
  });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="setCookie"><a href="/api/setCookie.html"><code>.setCookie()</code></a></h3>

    <p>Set a cookie, specified as a cookie JSON object, as defined <a href="https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object">here</a>.</p>
<p>Uses <code>cookie</code> protocol command.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>cookie</code></td>
           <td>object</td>
           <td><p>The cookie object.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(browser) {
  browser.setCookie({
    name     : &quot;test_cookie&quot;,
    value    : &quot;test_value&quot;,
    path     : &quot;/&quot;, (Optional)
    domain   : &quot;example.org&quot;, (Optional)
    secure   : false, (Optional)
    httpOnly : false, // (Optional)
    expiry   : 1395002765 // (Optional) time in seconds since midnight, January 1, 1970 UTC
  });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="deleteCookie"><a href="/api/deleteCookie.html"><code>.deleteCookie()</code></a></h3>

    <p>Delete the cookie with the given name. This command is a no-op if there is no such cookie visible to the current page.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>cookieName</code></td>
           <td>string</td>
           <td><p>The name of the cookie to delete.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(browser) {
  browser.deleteCookie(&quot;test_cookie&quot;, function() {
    // do something more in here
  });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="deleteCookies"><a href="/api/deleteCookies.html"><code>.deleteCookies()</code></a></h3>

    <p>Delete all cookies visible to the current page.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function(browser) {
  browser.deleteCookies(function() {
    // do something more in here
  });
}</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="cookie"><a href="/api/cookie.html"><code>.cookie()</code></a></h3>

    <p>Retrieve or delete all cookies visible to the current page or set a cookie. Normally this shouldn't be used directly, instead the cookie convenience methods should be used: <code>getCookie</code>, <code>getCookies</code>, <code>setCookie</code>, <code>deleteCookie</code>, <code>deleteCookies</code>.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>method</code></td>
           <td>string</td>
           <td><p>Http method</p></td>
         </tr>
         
         <tr>
           <td><code>callbackOrCookie</code><br><span class="optional">Optional</span></td>
           <td>function|object</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  

  
    <h3 class="section" id="useractions-headline">User Actions</h3>
    
  

  
  <div class="apimethod">
    <h3 id="doubleClick"><a href="/api/doubleClick.html"><code>.doubleClick()</code></a></h3>

    <p>Double-clicks at the current mouse coordinates (set by .moveto()).</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="mouseButtonClick"><a href="/api/mouseButtonClick.html"><code>.mouseButtonClick()</code></a></h3>

    <p>Click at the current mouse coordinates (set by moveto).</p>
<p>The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>button</code></td>
           <td>string|number</td>
           <td><p>The mouse button</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="mouseButtonDown"><a href="/api/mouseButtonDown.html"><code>.mouseButtonDown()</code></a></h3>

    <p>Click and hold the left mouse button (at the coordinates set by the last moveto command). Note that the next mouse-related command that should follow is <code>mouseButtonUp</code> . Any other mouse command (such as click or another call to buttondown) will yield undefined behaviour.</p>
<p>Can be used for implementing drag-and-drop. The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button, and if you don't pass in a button but do pass in a callback, it will handle it correctly.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>button</code></td>
           <td>string|number</td>
           <td><p>The mouse button</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="mouseButtonUp"><a href="/api/mouseButtonUp.html"><code>.mouseButtonUp()</code></a></h3>

    <p>Releases the mouse button previously held (where the mouse is currently at). Must be called once for every <code>mouseButtonDown</code> command issued.</p>
<p>Can be used for implementing drag-and-drop. The button can be (0, 1, 2) or ('left', 'middle', 'right'). It defaults to left mouse button, and if you don't pass in a button but do pass in a callback, it will handle it correctly.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>button</code></td>
           <td>string|number</td>
           <td><p>The mouse button</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="moveTo"><a href="/api/moveTo.html"><code>.moveTo()</code></a></h3>

    <p>Move the mouse by an offset of the specified element. If no element is specified, the move is relative to the current mouse cursor. If an element is provided but no offset, the mouse will be moved to the center of the element.</p>
<p>If the element is not visible, it will be scrolled into view.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>webElementId</code></td>
           <td>string</td>
           <td><p>The web element ID assigned to the element to move to. If not specified or is null, the offset is relative to current position of the mouse.</p></td>
         </tr>
         
         <tr>
           <td><code>xoffset</code></td>
           <td>number</td>
           <td><p>X offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.</p></td>
         </tr>
         
         <tr>
           <td><code>yoffset</code></td>
           <td>number</td>
           <td><p>Y offset to move to, relative to the top-left corner of the element. If not specified, the mouse will move to the middle of the element.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  

  
    <h3 class="section" id="userprompts-headline">User Prompts</h3>
    
  

  
  <div class="apimethod">
    <h3 id="acceptAlert"><a href="/api/acceptAlert.html"><code>.acceptAlert()</code></a></h3>

    <p>Accepts the currently displayed alert dialog. Usually, this is equivalent to clicking on the 'OK' button in the dialog.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="dismissAlert"><a href="/api/dismissAlert.html"><code>.dismissAlert()</code></a></h3>

    <p>Dismisses the currently displayed alert dialog. For confirm() and prompt() dialogs, this is equivalent to clicking the 'Cancel' button.</p>
<p>For alert() dialogs, this is equivalent to clicking the 'OK' button.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="getAlertText"><a href="/api/getAlertText.html"><code>.getAlertText()</code></a></h3>

    <p>Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string</td>
           <td> The text of the currently displayed alert.</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    

  </div>
  
  <div class="apimethod">
    <h3 id="setAlertText"><a href="/api/setAlertText.html"><code>.setAlertText()</code></a></h3>

    <p>Sends keystrokes to a JavaScript prompt() dialog.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>value</code></td>
           <td>string</td>
           <td><p>Keystrokes to send to the prompt() dialog</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  

  
    <h3 class="section" id="screens-headline">Screen Capture</h3>
    
  

  
  <div class="apimethod">
    <h3 id="saveScreenshot"><a href="/api/saveScreenshot.html"><code>.saveScreenshot()</code></a></h3>

    <p>Take a screenshot of the current page and saves it as the given filename.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>fileName</code></td>
           <td>string</td>
           <td><p>The complete path to the file name where the screenshot should be saved.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
 this.demoTest = function (browser) {
   browser.saveScreenshot(&#39;/path/to/fileName.png&#39;);
 };</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="screenshot"><a href="/api/screenshot.html"><code>.screenshot()</code></a></h3>

    <p>Take a screenshot of the current page.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>log_screenshot_data</code></td>
           <td>boolean</td>
           <td><p>Whether or not the screenshot data should appear in the logs when running with --verbose</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  

  
    <h3 class="section" id="mobile-headline">Mobile Related</h3>
    
  

  
  <div class="apimethod">
    <h3 id="getOrientation"><a href="/api/getOrientation.html"><code>.getOrientation()</code></a></h3>

    <p>Get the current browser orientation.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function which is called with the result value.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string} The current browser orientation: {LANDSCAPE|PORTRAIT</td>
           <td></td>
         </tr>
        </tbody>
      </table>
    </div>
    
    

  </div>
  
  <div class="apimethod">
    <h3 id="setOrientation"><a href="/api/setOrientation.html"><code>.setOrientation()</code></a></h3>

    <p>Sets the browser orientation.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>orientation</code></td>
           <td>string</td>
           <td><p>The new browser orientation: {LANDSCAPE|PORTRAIT}</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  <div class="apimethod">
    <h3 id="contexts"><a href="/api/contexts.html"><code>.contexts()</code></a></h3>

    <p>Get a list of the available contexts.</p>
<p>Used by Appium when testing hybrid mobile web apps. More info here: https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/hybrid.md.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>Array</td>
           <td> an array of strings representing available contexts, e.g 'WEBVIEW', or 'NATIVE'</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    

  </div>
  
  <div class="apimethod">
    <h3 id="currentContext"><a href="/api/currentContext.html"><code>.currentContext()</code></a></h3>

    <p>Get current context.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>Callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    <h5>Returns</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 200px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         <tr>
           <td>string|null</td>
           <td> a string representing the current context or `null`, representing "no context"</td>
         </tr>
        </tbody>
      </table>
    </div>
    
    

  </div>
  
  <div class="apimethod">
    <h3 id="setContext"><a href="/api/setContext.html"><code>.setContext()</code></a></h3>

    <p>Sets the context.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>context</code></td>
           <td>string</td>
           <td><p>context name to switch to - a string representing an available context.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    

  </div>
  
  

  
    <h3 class="section" id="utilities-headline">Utilities / Debugging</h3>
    
  

  
  <div class="apimethod">
    <h3 id="pause"><a href="/api/pause.html"><code>.pause()</code></a></h3>

    <p>Suspends the test for the given time in milliseconds. If the milliseconds argument is missing it will suspend the test indefinitely</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>ms</code></td>
           <td>number</td>
           <td><p>The number of milliseconds to wait.</p></td>
         </tr>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser.pause(1000);
  // or suspend indefinitely
  browser.pause();
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="useCss"><a href="/api/useCss.html"><code>.useCss()</code></a></h3>

    <p>Sets the locate strategy for selectors to <code>css selector</code>, therefore every following selector needs to be specified as css.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser
    .useCss() // we&#39;re back to CSS now
    .setValue(&#39;input[type=text]&#39;, &#39;nightwatch&#39;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="useXpath"><a href="/api/useXpath.html"><code>.useXpath()</code></a></h3>

    <p>Sets the locate strategy for selectors to xpath, therefore every following selector needs to be specified as xpath.</p>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code><br><span class="optional">Optional</span></td>
           <td>function</td>
           <td><p>Optional callback function to be called when the command finishes.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  browser
    .useXpath() // every selector now must be xpath
    .click(&quot;//tr[@data-recordid]/span[text()=&#39;Search Text&#39;]&quot;);
};</code></pre>
</div>
  

  </div>
  
  <div class="apimethod">
    <h3 id="perform"><a href="/api/perform.html"><code>.perform()</code></a></h3>

    <p>A simple perform command which allows access to the Nightwatch API in a callback. Can be useful if you want to read variables set by other commands.</p>
<p>The callback signature can have up to two parameters.</p>
<ul>
<li>no parameters: callback runs and perform completes immediately at the end of the execution of the callback.</li>
<li>one parameter: allows for asynchronous execution within the callback providing a done callback function for completion as the first argument.</li>
<li>two parameters: allows for asynchronous execution with the Nightwatch <code>api</code> object passed in as the first argument, followed by the done callback.</li>
</ul>

    <h5>Parameters:</h5>
    <div class="table-responsive">
      <table class="table table-bordered table-striped">
        <thead>
         <tr>
           <th style="width: 100px;">Name</th>
           <th style="width: 100px;">Type</th>
           <th>description</th>
         </tr>
        </thead>
        <tbody>
         
         <tr>
           <td><code>callback</code></td>
           <td>function</td>
           <td><p>The function to run as part of the queue.</p></td>
         </tr>
         
        </tbody>
      </table>
    </div>

    
    
    <h5>Usage:</h5>
<div class="sample-test">
<pre data-language="javascript"><code class="language-javascript">
this.demoTest = function (browser) {
  var elementValue;
  browser
    .getValue(&#39;.some-element&#39;, function(result) {
      elementValue = result.value;
    })
    // other stuff going on ...
    //
    // self-completing callback
    .perform(function() {
      console.log(&#39;elementValue&#39;, elementValue);
      // without any defined parameters, perform
      // completes immediately (synchronously)
    })
    //
    // asynchronous completion
    .perform(function(done) {
      console.log(&#39;elementValue&#39;, elementValue);
      // potentially other async stuff going on
      // on finished, call the done callback
      done();
    })
    //
    // asynchronous completion including api (client)
    .perform(function(client, done) {
      console.log(&#39;elementValue&#39;, elementValue);
      // similar to before, but now with client
      // potentially other async stuff going on
      // on finished, call the done callback
      done();
    });
};</code></pre>
</div>
  

  </div>
  
  

  </div>
  <!-- ============================================================
    // END Protocol commands
    ============================================================ -->

  </div>

</div>
</div>
  </div>

</div>
